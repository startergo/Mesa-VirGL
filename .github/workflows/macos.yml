name: macOS-CI
on:
  push:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean
      release_tag:
        description: 'Release tag (e.g., v24.3.0-virgl-1)'
        required: false
        default: ''
        type: string

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  macOS-CI:
    runs-on: macos-latest
    env:
      GALLIUM_DUMP_CPU: true
      MESON_EXEC: meson
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install Dependencies
      run: |
        cat > Brewfile <<EOL
        brew "bison"
        brew "expat"
        brew "gettext"
        brew "libx11"
        brew "libxcb"
        brew "libxdamage"
        brew "libxext"
        brew "libxrandr"
        brew "libxxf86vm"
        brew "libxfixes"
        brew "libxshmfence"
        brew "libxmu"
        brew "libxi"
        brew "molten-vk"
        brew "ninja"
        brew "pkg-config"
        brew "python@3.10"
        brew "meson"
        brew "llvm"
        EOL

        brew update
        brew bundle --verbose
        
        # Install XQuartz for X11 and DRM headers
        brew install --cask xquartz
        
        # Create comprehensive DRM headers for macOS compatibility  
        sudo mkdir -p /usr/local/include
        sudo tee /usr/local/include/xf86drm.h > /dev/null <<'EOF'
        #ifndef _XF86DRM_H_
        #define _XF86DRM_H_
        /* Comprehensive DRM header for macOS Mesa VirGL build */
        
        #include <stdint.h>
        #include <sys/types.h>
        #include <sys/ioccom.h>
        
        /* Only define if not already defined by Mesa's drm-uapi headers */
        #ifndef DRM_NODE_PRIMARY
        #define DRM_NODE_PRIMARY 0
        #define DRM_NODE_RENDER 2
        #endif
        
        #ifndef DRM_CLOEXEC
        #define DRM_CLOEXEC 0x80000000
        #endif
        
        /* Basic DRM types - only if not defined */
        #ifndef _DRM_H_
        typedef int drmDevice;
        typedef int drmDevicePtr;
        typedef struct drm_version *drmVersionPtr;
        #endif
        
        /* Additional DRM function stubs needed by VirGL */
        static inline int drmPrimeFDToHandle(int fd, int prime_fd, uint32_t *handle) {
            /* Stub: always fail gracefully */
            return -1;
        }
        
        static inline int drmPrimeHandleToFD(int fd, uint32_t handle, uint32_t flags, int *prime_fd) {
            /* Stub: always fail gracefully */
            return -1;
        }
        
        static inline drmVersionPtr drmGetVersion(int fd) {
            /* Stub: return NULL to indicate no version info */
            return NULL;
        }
        
        static inline void drmFreeVersion(drmVersionPtr version) {
            /* Stub: nothing to free */
        }
        
        /* Main DRM ioctl stub */
        static inline int drmIoctl(int fd, unsigned long request, void *arg) {
            /* Always return success for stubs */
            return 0;
        }
        
        #endif
        EOF
        
        # Create stub libsync header for macOS compatibility
        sudo tee /usr/local/include/libsync.h > /dev/null <<'EOF'
        #ifndef _LIBSYNC_H_
        #define _LIBSYNC_H_
        /* Stub libsync header for macOS Mesa VirGL build */
        
        #include <stdint.h>
        
        /* Android/Linux sync fence functionality stubs */
        #define SYNC_IOC_WAIT       1
        #define SYNC_IOC_MERGE      2
        #define SYNC_IOC_INFO       3
        #define SYNC_IOC_FILE_INFO  4
        
        struct sync_fence_info {
            char name[32];
            int status;
            uint64_t timestamp;
        };
        
        struct sync_file_info {
            char name[32];
            int status;
            uint32_t num_fences;
            struct sync_fence_info *fences;
        };
        
        /* Stub function declarations */
        static inline int sync_wait(int fd, int timeout) { return 0; }
        static inline int sync_merge(const char *name, int fd1, int fd2) { return -1; }
        static inline int sync_fence_info(int fd, struct sync_file_info *info) { return -1; }
        static inline void sync_accumulate(const char *name, int *fence_fd, int fd) {
            /* Stub: accumulate sync fences - do nothing on macOS */
        }
        
        #endif
        EOF
    - name: Install Python dependencies
      run: |
        python3 -m pip install --break-system-packages packaging mako PyYAML
    - name: Configure
      run: |
        LLVM_PREFIX=$(brew --prefix llvm)
        echo "LLVM_PREFIX: $LLVM_PREFIX"
        cat > native_config <<EOL
        [binaries]
        llvm-config = '${LLVM_PREFIX}/bin/llvm-config'
        EOL
        echo "Native config contents:"
        cat native_config
        echo "Running meson setup..."
        $MESON_EXEC setup . build --native-file=native_config -Dmoltenvk-dir=$(brew --prefix molten-vk) -Dbuild-tests=true -Dosmesa=false -Dgallium-drivers=virgl -Degl=disabled -Dglx=disabled -Dopengl=true -Dshared-glapi=enabled
    - name: Build
      run: $MESON_EXEC compile -C build
    - name: Test
      run: $MESON_EXEC test -C build --print-errorlogs
    - name: Install
      run: $MESON_EXEC install -C build --destdir $PWD/install
    - name: Create libGL.dylib for QEMU VirGL compatibility
      run: |
        # Navigate to the installed lib directory
        cd install/opt/homebrew/lib
        
        # QEMU VirGL expects libGL.dylib but Mesa on macOS only creates OpenGL ES libraries
        # Create a compatibility symlink that points to the OpenGL ES 2.0 library
        # This allows QEMU VirGL to find and use the OpenGL functionality
        if [ -f "libGLESv2.2.dylib" ] && [ ! -f "libGL.1.dylib" ]; then
          echo "Creating libGL.dylib compatibility symlink for QEMU VirGL..."
          ln -sf libGLESv2.2.dylib libGL.1.dylib
          ln -sf libGL.1.dylib libGL.dylib
          echo "✓ Created libGL.dylib -> libGLESv2.2.dylib symlink"
        fi
        
        # Also create a gl.pc pkg-config file for desktop OpenGL
        cd pkgconfig
        if [ ! -f "gl.pc" ] && [ -f "glesv2.pc" ]; then
          echo "Creating gl.pc pkg-config file for desktop OpenGL compatibility..."
          sed 's/glesv2/gl/g; s/GLESv2/GL/g; s/OpenGL ES/OpenGL/g' glesv2.pc > gl.pc
          echo "✓ Created gl.pc based on glesv2.pc"
        fi
        
        echo "Mesa VirGL macOS libraries prepared:"
        ls -la ../lib*.dylib
        echo "Pkg-config files:"
        ls -la *.pc
    - name: 'Upload Artifact'
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: macos-dri-result
        path: |
          build/meson-logs/
          install/
        retention-days: 5

  create-release:
    needs: macOS-CI
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release == 'true' && github.event.inputs.release_tag != ''
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-dri-result
        path: ./artifacts
        
    - name: Create release archive
      run: |
        cd artifacts
        # Create a comprehensive release package
        mkdir -p mesa-virgl-macos
        
        # Copy installation files
        if [ -d "install" ]; then
          cp -r install/* mesa-virgl-macos/
        fi
        
        # Create release info
        cat > mesa-virgl-macos/RELEASE_INFO.txt << 'EOF'
        Mesa VirGL for macOS - Release Build
        ====================================
        
        This is a custom Mesa build optimized for VirGL on macOS with Apple Silicon.
        
        Key Features:
        - VirGL driver support for GPU virtualization  
        - Full OpenGL library support
        - Shared OpenGL API implementation
        - Metal-to-OpenGL translation compatibility
        - Optimized for QEMU virtualization on macOS
        - ARM64 and x86_64 support
        
        Library Differences from Linux Build:
        - macOS uses .dylib files instead of .so files
        - Includes libGL.dylib (compatibility symlink to OpenGL ES)
        - Includes libGLESv2.dylib and libGLESv1_CM.dylib (OpenGL ES libraries)
        - Includes libglapi.dylib (OpenGL API dispatch layer)
        - No OSMesa libraries (not needed for QEMU virtualization)
        - OpenGL ES libraries provide the actual OpenGL implementation
        - libGL.dylib symlink ensures QEMU compatibility
        
        Installation:
        1. Extract this package
        2. Copy contents to /opt/mesa-virgl/ (requires sudo)
        3. Use with QEMU VirGL for accelerated graphics
        
        Build Information:
        - Mesa Version: 24.3.0-devel
        - Target: macOS (Darwin)
        - Architecture: Universal (ARM64 + x86_64)
        - Gallium Drivers: VirGL
        - Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - Git Commit: ${{ github.sha }}
        
        For more information, see: https://github.com/${{ github.repository }}
        EOF
        
        # Create installation script
        cat > mesa-virgl-macos/install.sh << 'EOF'
        #!/bin/bash
        # Mesa VirGL macOS Installation Script
        
        set -e
        
        echo "Mesa VirGL for macOS - Installation Script"
        echo "=========================================="
        
        INSTALL_PREFIX="/opt/mesa-virgl"
        
        if [ "$EUID" -ne 0 ]; then
          echo "Error: This script must be run as root (use sudo)"
          exit 1
        fi
        
        echo "Creating installation directory..."
        mkdir -p "$INSTALL_PREFIX"
        
        echo "Installing Mesa VirGL libraries..."
        if [ -d "opt/homebrew" ]; then
          cp -r opt/homebrew/* "$INSTALL_PREFIX/"
        elif [ -d "opt" ]; then
          cp -r opt/* "$INSTALL_PREFIX/"
        elif [ -d "usr" ]; then
          cp -r usr/* "$INSTALL_PREFIX/"
        else
          echo "Warning: No standard installation structure found"
          cp -r * "$INSTALL_PREFIX/"
        fi
        
        echo "Fixing pkg-config files for custom installation path..."
        if [ -d "$INSTALL_PREFIX/lib/pkgconfig" ]; then
          # Update pkg-config files to use the actual installation prefix
          for pc_file in "$INSTALL_PREFIX/lib/pkgconfig"/*.pc; do
            if [ -f "$pc_file" ]; then
              echo "Updating $pc_file..."
              sed -i.bak "s|prefix=/opt/homebrew|prefix=$INSTALL_PREFIX|g" "$pc_file"
              rm "$pc_file.bak" 2>/dev/null || true
            fi
          done
        fi
        
        echo "Setting permissions..."
        chmod -R 755 "$INSTALL_PREFIX"
        
        echo "Installation complete!"
        echo "Mesa VirGL installed to: $INSTALL_PREFIX"
        echo ""
        echo "To use with QEMU:"
        echo "  export DYLD_LIBRARY_PATH=\"$INSTALL_PREFIX/lib:\$DYLD_LIBRARY_PATH\""
        echo "  export PKG_CONFIG_PATH=\"$INSTALL_PREFIX/lib/pkgconfig:\$PKG_CONFIG_PATH\""
        echo ""
        echo "Pkg-config files have been updated for the installation path."
        echo "For integration with QEMU-3dfx, see the project documentation."
        EOF
        
        chmod +x mesa-virgl-macos/install.sh
        
        # Create uninstall script
        cat > mesa-virgl-macos/uninstall.sh << 'EOF'
        #!/bin/bash
        # Mesa VirGL macOS Uninstall Script
        
        set -e
        
        echo "Mesa VirGL for macOS - Uninstall Script"
        echo "======================================="
        
        # Default installation directories to check
        INSTALL_DIRS=(
          "/opt/mesa-virgl"
          "/usr/local/mesa-virgl"
          "/opt/homebrew/lib/libGL.dylib"
          "/opt/homebrew/lib/libGLESv2.dylib"
          "/opt/homebrew/lib/libGLESv1_CM.dylib"
          "/opt/homebrew/lib/libglapi.dylib"
        )
        
        # Custom directory from user input
        if [ "$1" != "" ]; then
          echo "Checking custom directory: $1"
          INSTALL_DIRS+=("$1")
        fi
        
        if [ "$EUID" -ne 0 ]; then
          echo "Error: This script must be run as root (use sudo)"
          echo "Usage: sudo ./uninstall.sh [custom_path]"
          exit 1
        fi
        
        echo "Searching for Mesa VirGL installations..."
        
        FOUND_INSTALLATIONS=()
        
        # Check for directory installations
        for dir in "/opt/mesa-virgl" "/usr/local/mesa-virgl"; do
          if [ -d "$dir" ]; then
            echo "Found Mesa VirGL installation: $dir"
            FOUND_INSTALLATIONS+=("$dir")
          fi
        done
        
        # Check for Homebrew integration (individual files)
        HOMEBREW_FILES=(
          "/opt/homebrew/lib/libGL.dylib"
          "/opt/homebrew/lib/libGLESv2.2.dylib"
          "/opt/homebrew/lib/libGLESv1_CM.2.dylib"
          "/opt/homebrew/lib/libglapi.0.dylib"
          "/opt/homebrew/lib/pkgconfig/gl.pc"
          "/opt/homebrew/lib/pkgconfig/glesv2.pc"
          "/opt/homebrew/lib/pkgconfig/glesv1_cm.pc"
        )
        
        HOMEBREW_MESA_FILES=()
        for file in "${HOMEBREW_FILES[@]}"; do
          if [ -f "$file" ]; then
            # Check if it's a Mesa VirGL file (look for symlinks or Mesa signatures)
            if [ -L "$file" ] || grep -q "Mesa" "$file" 2>/dev/null || strings "$file" 2>/dev/null | grep -q "virgl\|Mesa" 2>/dev/null; then
              HOMEBREW_MESA_FILES+=("$file")
            fi
          fi
        done
        
        if [ ${#HOMEBREW_MESA_FILES[@]} -gt 0 ]; then
          echo "Found Mesa VirGL files in Homebrew directory:"
          printf '  %s\n' "${HOMEBREW_MESA_FILES[@]}"
          FOUND_INSTALLATIONS+=("HOMEBREW_FILES")
        fi
        
        # Check custom directory if provided
        if [ "$1" != "" ] && [ -d "$1" ]; then
          echo "Found custom Mesa VirGL installation: $1"
          FOUND_INSTALLATIONS+=("$1")
        fi
        
        if [ ${#FOUND_INSTALLATIONS[@]} -eq 0 ]; then
          echo "No Mesa VirGL installations found."
          echo ""
          echo "If you installed to a custom location, run:"
          echo "  sudo ./uninstall.sh /path/to/custom/directory"
          exit 0
        fi
        
        echo ""
        echo "Found ${#FOUND_INSTALLATIONS[@]} Mesa VirGL installation(s):"
        for installation in "${FOUND_INSTALLATIONS[@]}"; do
          if [ "$installation" = "HOMEBREW_FILES" ]; then
            echo "  - Homebrew integration (individual files)"
          else
            echo "  - $installation"
          fi
        done
        
        echo ""
        read -p "Do you want to remove ALL found Mesa VirGL installations? [y/N]: " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
          echo "Uninstall cancelled."
          exit 0
        fi
        
        echo ""
        echo "Removing Mesa VirGL installations..."
        
        for installation in "${FOUND_INSTALLATIONS[@]}"; do
          if [ "$installation" = "HOMEBREW_FILES" ]; then
            echo "Removing Homebrew Mesa VirGL files..."
            for file in "${HOMEBREW_MESA_FILES[@]}"; do
              if [ -f "$file" ] || [ -L "$file" ]; then
                echo "  Removing: $file"
                rm -f "$file"
              fi
            done
          else
            if [ -d "$installation" ]; then
              echo "Removing directory: $installation"
              rm -rf "$installation"
            fi
          fi
        done
        
        echo ""
        echo "Mesa VirGL uninstall complete!"
        echo ""
        echo "Note: You may want to clean up environment variables:"
        echo "  - Remove DYLD_LIBRARY_PATH entries for Mesa VirGL"
        echo "  - Remove PKG_CONFIG_PATH entries for Mesa VirGL"
        echo "  - Remove MESA_LOADER_DRIVER_OVERRIDE=virpipe"
        echo ""
        echo "Check your shell configuration files:"
        echo "  ~/.zshrc, ~/.bashrc, ~/.profile"
        EOF
        
        chmod +x mesa-virgl-macos/uninstall.sh
        
        # Create README with installation and uninstall instructions
        cat > mesa-virgl-macos/README.md << 'EOF'
        # Mesa VirGL for macOS
        
        Custom Mesa build optimized for VirGL on macOS with Apple Silicon.
        
        ## Installation
        
        **IMPORTANT**: Install to an isolated directory to avoid conflicts with system OpenGL.
        
        ### Quick Install (Recommended)
        ```bash
        sudo ./install.sh
        ```
        
        This installs to `/opt/mesa-virgl/` and automatically fixes pkg-config paths.
        
        ## Usage
        
        Set environment variables before running QEMU:
        
        ```bash
        export DYLD_LIBRARY_PATH="/opt/mesa-virgl/lib:$DYLD_LIBRARY_PATH"
        export PKG_CONFIG_PATH="/opt/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
        export MESA_LOADER_DRIVER_OVERRIDE=virpipe
        
        # Run QEMU with VirGL
        qemu-system-aarch64 -device virtio-gpu-gl-pci,blob=true -display sdl,gl=on [options...]
        ```
        
        ## Uninstall
        
        ### Automatic Uninstall
        ```bash
        sudo ./uninstall.sh
        ```
        
        This automatically detects and removes Mesa VirGL from common locations:
        - `/opt/mesa-virgl/`
        - `/usr/local/mesa-virgl/`
        - Homebrew integration files
        
        ### Manual Uninstall for Custom Locations
        ```bash
        sudo ./uninstall.sh /path/to/custom/location
        ```
        
        ### Manual Cleanup
        If you need to remove manually:
        
        ```bash
        # Remove installation directory
        sudo rm -rf /opt/mesa-virgl
        
        # Remove any Homebrew integration files (if used)
        sudo rm -f /opt/homebrew/lib/libGL.dylib
        sudo rm -f /opt/homebrew/lib/libGLESv2.2.dylib
        sudo rm -f /opt/homebrew/lib/libGLESv1_CM.2.dylib
        sudo rm -f /opt/homebrew/lib/libglapi.0.dylib
        sudo rm -f /opt/homebrew/lib/pkgconfig/gl.pc
        sudo rm -f /opt/homebrew/lib/pkgconfig/glesv2.pc
        sudo rm -f /opt/homebrew/lib/pkgconfig/glesv1_cm.pc
        
        # Clean up environment variables from shell config
        # Edit ~/.zshrc, ~/.bashrc, or ~/.profile and remove:
        # export DYLD_LIBRARY_PATH="/opt/mesa-virgl/lib:$DYLD_LIBRARY_PATH"
        # export PKG_CONFIG_PATH="/opt/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
        # export MESA_LOADER_DRIVER_OVERRIDE=virpipe
        ```
        
        ## Files Included
        
        - `install.sh` - Automatic installation script
        - `uninstall.sh` - Automatic uninstall script
        - `RELEASE_INFO.txt` - Detailed build and usage information
        - Mesa VirGL libraries and headers
        - pkg-config files for integration
        
        For detailed documentation, see `RELEASE_INFO.txt`.
        EOF
        
        # Create archive with contents directly (no wrapper directory)
        cd mesa-virgl-macos
        echo "Creating compressed archive..."
        tar -czf ../mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz .
        cd ..
        
        # Verify archive was created correctly
        echo "Archive created:"
        ls -la mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        file mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        
        # Calculate checksums
        sha256sum mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz > mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz.sha256
        
        echo "Release package created:"
        ls -la mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz*
        echo "Archive file type:"
        file mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.release_tag }}
        release_name: Mesa VirGL ${{ github.event.inputs.release_tag }}
        body: |
          # Mesa VirGL for macOS - ${{ github.event.inputs.release_tag }}
          
          This release provides a custom Mesa build optimized for VirGL on macOS with Apple Silicon.
          
          ## 🚀 Key Features
          - **VirGL Driver**: GPU virtualization support for QEMU
          - **Full OpenGL Support**: Complete OpenGL desktop library
          - **Shared OpenGL API**: Optimized shared API implementation
          - **Metal Translation**: Compatible with Apple's Metal-to-OpenGL translation layer
          - **macOS Optimized**: Built specifically for macOS host systems
          - **Universal Binary**: Supports both ARM64 and x86_64 architectures
          
          ## 📋 Library Comparison
          
          **Linux Original** → **macOS Equivalent**:
          - `libGL.so.1` → `libGL.1.dylib` (compatibility symlink)
          - `libglapi.so.0` → `libglapi.0.dylib` (OpenGL API dispatch)
          
          **macOS-Specific Libraries**:
          - `libGLESv2.2.dylib` (OpenGL ES 2.0 - actual OpenGL implementation)
          - `libGLESv1_CM.2.dylib` (OpenGL ES 1.x Common profile)
          - VirGL gallium driver modules
          
          **Not Included** (not needed for QEMU):
          - OSMesa libraries (off-screen rendering not needed for QEMU)
          - EGL libraries (not supported on macOS Mesa)
          
          **Architecture Notes**:
          - Mesa on macOS uses OpenGL ES libraries as the actual OpenGL implementation
          - libGL.dylib is a compatibility symlink pointing to libGLESv2.2.dylib
          - This approach provides full OpenGL functionality through OpenGL ES backend
          
          **Size Differences**: macOS libraries should be comparable to Linux due to:
          - Full OpenGL support enabled through OpenGL ES backend
          - Shared OpenGL API implementation via libglapi.dylib
          - VirGL driver with complete OpenGL functionality
          - OpenGL ES libraries provide the actual OpenGL implementation
          - Focused on QEMU use case (no unnecessary components)
          - May be smaller due to macOS-specific optimizations
          - Different linking strategies (.dylib vs .so)
          - Exclusion of X11-specific code paths
          
          ## 📦 What's Included
          - VirGL Gallium driver libraries
          - Mesa core libraries and headers
          - OpenGL ES libraries (libGLESv2, libGLESv1_CM) - actual OpenGL implementation
          - OpenGL API dispatch layer (libglapi.dylib)
          - Compatibility symlink (libGL.dylib → libGLESv2.2.dylib)
          - **Installation script** (`install.sh`) for easy setup
          - **Uninstall script** (`uninstall.sh`) for automatic removal
          - **README** with quick setup instructions
          - Compatible with QEMU-3dfx for accelerated virtualization
          
          ## 🛠 Installation
          
          **Important Notes**: 
          - **CRITICAL**: Mesa VirGL must be installed to an isolated directory to avoid conflicts with macOS system OpenGL.
          - **DO NOT** install to system library paths like `/usr/local/lib/` or Homebrew's main paths - this will cause crashes.
          - **macOS Safari Users**: Safari automatically decompresses `.tar.gz` files to `.tar` when downloaded. If this happens, use the `.tar` commands below. To keep the original `.tar.gz`, right-click the download link and select "Download Linked File As..." or use a different browser.
          
          ### Method 1: Isolated Installation via Script (Recommended)
          Install to `/opt/mesa-virgl/` to avoid OpenGL conflicts:
          ```bash
          # For .tar.gz files (if downloaded properly compressed):
          tar -xzf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
          # For .tar files (if Safari auto-decompressed):
          tar -xf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar
          
          sudo ./install.sh
          ```
          
          ### Method 2: Manual Isolated Installation
          Extract and manually copy to an isolated directory:
          ```bash
          # For .tar.gz files (if downloaded properly compressed):
          tar -xzf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
          # For .tar files (if Safari auto-decompressed):
          tar -xf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar
          
          # Create isolated directory for Mesa VirGL (avoids system OpenGL conflicts)
          sudo mkdir -p /opt/mesa-virgl
          sudo cp -r opt/homebrew/* /opt/mesa-virgl/
          
          # Fix pkg-config files for custom installation path
          sudo sed -i.bak 's|prefix=/opt/homebrew|prefix=/opt/mesa-virgl|g' /opt/mesa-virgl/lib/pkgconfig/*.pc
          sudo rm /opt/mesa-virgl/lib/pkgconfig/*.pc.bak 2>/dev/null || true
          ```
          
          ### Method 3: Alternative Isolated Directory
          Install to a different isolated location (e.g., `/usr/local/mesa-virgl/`):
          ```bash
          # For .tar.gz files (if downloaded properly compressed):
          tar -xzf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
          # For .tar files (if Safari auto-decompressed):
          tar -xf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar
          
          # Create alternative isolated directory
          sudo mkdir -p /usr/local/mesa-virgl
          sudo cp -r opt/homebrew/* /usr/local/mesa-virgl/
          
          # Fix pkg-config files for custom installation path
          sudo sed -i.bak 's|prefix=/opt/homebrew|prefix=/usr/local/mesa-virgl|g' /usr/local/mesa-virgl/lib/pkgconfig/*.pc
          sudo rm /usr/local/mesa-virgl/lib/pkgconfig/*.pc.bak 2>/dev/null || true
          ```
          
          ## ✅ Verification
          Verify the download integrity:
          ```bash
          sha256sum -c mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz.sha256
          ```
          
          ## 🗑️ Uninstall
          
          Mesa VirGL includes an automatic uninstall script that detects and removes installations from common locations.
          
          ### Automatic Uninstall (Recommended)
          ```bash
          # Extract the package (if not already extracted)
          tar -xzf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
          # or: tar -xf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar
          
          # Run uninstall script
          sudo ./uninstall.sh
          ```
          
          The uninstall script automatically detects and removes:
          - `/opt/mesa-virgl/` (Method 1 & 2 installations)
          - `/usr/local/mesa-virgl/` (Method 3 installations)
          - Homebrew integration files (if any)
          - Mesa VirGL-specific files in system locations
          
          ### Uninstall from Custom Location
          If you installed to a custom directory:
          ```bash
          sudo ./uninstall.sh /path/to/custom/location
          ```
          
          ### Manual Cleanup
          After running the uninstall script, you may want to clean up environment variables:
          
          1. Edit your shell configuration file (`~/.zshrc`, `~/.bashrc`, or `~/.profile`)
          2. Remove or comment out these lines:
          ```bash
          # export DYLD_LIBRARY_PATH="/opt/mesa-virgl/lib:$DYLD_LIBRARY_PATH"
          # export PKG_CONFIG_PATH="/opt/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
          # export MESA_LOADER_DRIVER_OVERRIDE=virpipe
          ```
          3. Reload your shell: `source ~/.zshrc` (or restart terminal)
          
          ### Complete Manual Removal
          If the automatic uninstall doesn't work, you can remove manually:
          ```bash
          # Remove common installation directories
          sudo rm -rf /opt/mesa-virgl
          sudo rm -rf /usr/local/mesa-virgl
          
          # Remove any Homebrew integration files
          sudo rm -f /opt/homebrew/lib/libGL.dylib
          sudo rm -f /opt/homebrew/lib/libGLESv2.2.dylib
          sudo rm -f /opt/homebrew/lib/libGLESv1_CM.2.dylib
          sudo rm -f /opt/homebrew/lib/libglapi.0.dylib
          sudo rm -f /opt/homebrew/lib/pkgconfig/gl.pc
          sudo rm -f /opt/homebrew/lib/pkgconfig/glesv2.pc
          sudo rm -f /opt/homebrew/lib/pkgconfig/glesv1_cm.pc
          ```
          
          ## 🔧 Usage with QEMU
          
          **IMPORTANT**: Always set these environment variables before running QEMU to ensure Mesa VirGL is used instead of system OpenGL:
          
          ### If installed to `/opt/mesa-virgl/` (Method 1 & 2):
          ```bash
          export DYLD_LIBRARY_PATH="/opt/mesa-virgl/lib:$DYLD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="/opt/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
          export MESA_LOADER_DRIVER_OVERRIDE=virpipe
          
          # Example QEMU command with VirGL acceleration:
          qemu-system-aarch64 \\
            -M virt \\
            -cpu host \\
            -accel hvf \\
            -device virtio-gpu-gl-pci,blob=true \\
            -display sdl,gl=on \\
            [other options...]
          ```
          
          ### If installed to `/usr/local/mesa-virgl/` (Method 3):
          ```bash
          export DYLD_LIBRARY_PATH="/usr/local/mesa-virgl/lib:$DYLD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="/usr/local/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
          export MESA_LOADER_DRIVER_OVERRIDE=virpipe
          
          # Example QEMU command with VirGL acceleration:
          qemu-system-aarch64 \\
            -M virt \\
            -cpu host \\
            -accel hvf \\
            -device virtio-gpu-gl-pci,blob=true \\
            -display sdl,gl=on \\
            [other options...]
          ```
          
          ### Advanced: Use with Shell Script
          Create a wrapper script to easily use QEMU with Mesa VirGL:
          ```bash
          # Create qemu-virgl script
          cat > ~/qemu-virgl << 'EOF'
          #!/bin/bash
          export DYLD_LIBRARY_PATH="/opt/mesa-virgl/lib:$DYLD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="/opt/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
          export MESA_LOADER_DRIVER_OVERRIDE=virpipe
          exec qemu-system-aarch64 "$@"
          EOF
          chmod +x ~/qemu-virgl
          
          # Use the wrapper:
          ~/qemu-virgl -M virt -cpu host -accel hvf -device virtio-gpu-gl-pci,blob=true -display sdl,gl=on [other options...]
          ```
          
          ## 🛠 Building QEMU with Mesa VirGL Libraries
          
          ### Option 1: Use with Existing QEMU (Runtime - Recommended)
          Simply set environment variables before running QEMU (shown above). This is the safest approach.
          
          ### Option 2: Compile QEMU with Mesa VirGL Support
          **Warning**: This approach links Mesa VirGL directly into QEMU, which may cause conflicts.
          
          #### Prerequisites:
          ```bash
          # Install QEMU build dependencies
          brew install ninja meson glib pixman
          
          # Ensure Mesa VirGL libraries are installed to isolated directory
          # Example: Install to /opt/mesa-virgl/ (Method 1 or 2 above)
          ```
          
          #### Configure QEMU Build:
          ```bash
          # Clone QEMU source
          git clone https://github.com/qemu/qemu.git
          cd qemu
          
          # Configure with Mesa VirGL support (isolated installation)
          ./configure \\
            --enable-opengl \\
            --enable-virglrenderer \\
            --enable-sdl \\
            --disable-cocoa \\
            --target-list=aarch64-softmmu,x86_64-softmmu,i386-softmmu \\
            --extra-cflags="-I/opt/mesa-virgl/include" \\
            --extra-ldflags="-L/opt/mesa-virgl/lib" \\
            --pkg-config-path="/opt/mesa-virgl/lib/pkgconfig"
          
          # Alternative for /usr/local/mesa-virgl/ installation:
          ./configure \\
            --enable-opengl \\
            --enable-virglrenderer \\
            --enable-sdl \\
            --disable-cocoa \\
            --target-list=aarch64-softmmu,x86_64-softmmu,i386-softmmu \\
            --extra-cflags="-I/usr/local/mesa-virgl/include" \\
            --extra-ldflags="-L/usr/local/mesa-virgl/lib" \\
            --pkg-config-path="/usr/local/mesa-virgl/lib/pkgconfig"
          ```
          
          #### Build QEMU:
          ```bash
          make -j$(sysctl -n hw.ncpu)
          
          # Optional: Install system-wide
          sudo make install
          ```
          
          #### Verify VirGL Integration:
          ```bash
          # Check if QEMU was built with VirGL support
          ./qemu-system-aarch64 --help | grep virgl
          
          # Should show: -device virtio-gpu-gl-pci
          # Should show: -display sdl,gl=on
          ```
          
          ### Option 3: Use with QEMU-3dfx Fork (Recommended)
          If using the QEMU-3dfx fork for enhanced 3D acceleration:
          
          ```bash
          # Install via Homebrew
          brew tap akihikodaki/qemu
          brew install qemu-3dfx
          
          # Set Mesa VirGL environment before running (adjust path as needed)
          export DYLD_LIBRARY_PATH="/opt/mesa-virgl/lib:$DYLD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="/opt/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
          export MESA_LOADER_DRIVER_OVERRIDE=virpipe
          
          # Run QEMU-3dfx with VirGL
          qemu-system-aarch64 \\
            -device virtio-gpu-gl-pci,blob=true \\
            -display sdl,gl=on \\
            [other options...]
          ```
          
          ### Troubleshooting Tips:
          - **OpenGL Conflicts**: If you get segmentation faults, ensure Mesa VirGL is installed to an isolated directory (not `/usr/local/lib/` or `/opt/homebrew/lib/`)
          - **Missing Symbols**: Errors like `_CGLSetCurrentContext missing` indicate conflicts with system OpenGL - reinstall to isolated directory
          - **For Apple Silicon**: Ensure you're building with ARM64 support
          - **For Intel Macs**: May need `--target-list` adjustments
          - **Dependencies**: VirGL renderer library should be automatically detected
          - **Configuration Issues**: Check `config.log` if configure fails to find Mesa libraries
          
          ### Performance Notes:
          - Use runtime environment variables (Option 1) for best compatibility
          - Avoid linking Mesa VirGL directly into QEMU when possible
          - The `virpipe` driver override ensures VirGL is used for GPU acceleration
          
          ## 📊 Build Information
          - **Mesa Version**: 24.3.0-devel
          - **Build Target**: macOS (Darwin)
          - **Gallium Drivers**: VirGL
          - **Build Date**: ${{ github.run_id }}
          - **Git Commit**: ${{ github.sha }}
          
          ## 🐛 Issues & Support
          For issues, questions, or contributions, please visit the [project repository](https://github.com/${{ github.repository }}).
          
          ---
          *Built with GitHub Actions on macOS*
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        asset_name: mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Release Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz.sha256
        asset_name: mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz.sha256
        asset_content_type: text/plain
