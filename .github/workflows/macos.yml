name: macOS-CI
on:
  push:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean
      release_tag:
        description: 'Release tag (e.g., v24.3.0-virgl-1)'
        required: false
        default: ''
        type: string

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  macOS-CI:
    runs-on: macos-latest
    env:
      GALLIUM_DUMP_CPU: true
      MESON_EXEC: meson
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install Dependencies
      run: |
        cat > Brewfile <<EOL
        brew "bison"
        brew "expat"
        brew "gettext"
        brew "libx11"
        brew "libxcb"
        brew "libxdamage"
        brew "libxext"
        brew "libxrandr"
        brew "libxxf86vm"
        brew "libxfixes"
        brew "libxshmfence"
        brew "libxmu"
        brew "libxi"
        brew "molten-vk"
        brew "ninja"
        brew "pkg-config"
        brew "python@3.10"
        brew "meson"
        brew "llvm"
        EOL

        brew update
        brew bundle --verbose
        
        # Install XQuartz for X11 and DRM headers
        brew install --cask xquartz
        
        # Create comprehensive DRM headers for macOS compatibility  
        sudo mkdir -p /usr/local/include
        sudo tee /usr/local/include/xf86drm.h > /dev/null <<'EOF'
        #ifndef _XF86DRM_H_
        #define _XF86DRM_H_
        /* Comprehensive DRM header for macOS Mesa VirGL build */
        
        #include <stdint.h>
        #include <sys/types.h>
        #include <sys/ioccom.h>
        
        /* Only define if not already defined by Mesa's drm-uapi headers */
        #ifndef DRM_NODE_PRIMARY
        #define DRM_NODE_PRIMARY 0
        #define DRM_NODE_RENDER 2
        #endif
        
        #ifndef DRM_CLOEXEC
        #define DRM_CLOEXEC 0x80000000
        #endif
        
        /* Basic DRM types - only if not defined */
        #ifndef _DRM_H_
        typedef int drmDevice;
        typedef int drmDevicePtr;
        typedef struct drm_version *drmVersionPtr;
        #endif
        
        /* Additional DRM function stubs needed by VirGL */
        static inline int drmPrimeFDToHandle(int fd, int prime_fd, uint32_t *handle) {
            /* Stub: always fail gracefully */
            return -1;
        }
        
        static inline int drmPrimeHandleToFD(int fd, uint32_t handle, uint32_t flags, int *prime_fd) {
            /* Stub: always fail gracefully */
            return -1;
        }
        
        static inline drmVersionPtr drmGetVersion(int fd) {
            /* Stub: return NULL to indicate no version info */
            return NULL;
        }
        
        static inline void drmFreeVersion(drmVersionPtr version) {
            /* Stub: nothing to free */
        }
        
        /* Main DRM ioctl stub */
        static inline int drmIoctl(int fd, unsigned long request, void *arg) {
            /* Always return success for stubs */
            return 0;
        }
        
        #endif
        EOF
        
        # Create stub libsync header for macOS compatibility
        sudo tee /usr/local/include/libsync.h > /dev/null <<'EOF'
        #ifndef _LIBSYNC_H_
        #define _LIBSYNC_H_
        /* Stub libsync header for macOS Mesa VirGL build */
        
        #include <stdint.h>
        
        /* Android/Linux sync fence functionality stubs */
        #define SYNC_IOC_WAIT       1
        #define SYNC_IOC_MERGE      2
        #define SYNC_IOC_INFO       3
        #define SYNC_IOC_FILE_INFO  4
        
        struct sync_fence_info {
            char name[32];
            int status;
            uint64_t timestamp;
        };
        
        struct sync_file_info {
            char name[32];
            int status;
            uint32_t num_fences;
            struct sync_fence_info *fences;
        };
        
        /* Stub function declarations */
        static inline int sync_wait(int fd, int timeout) { return 0; }
        static inline int sync_merge(const char *name, int fd1, int fd2) { return -1; }
        static inline int sync_fence_info(int fd, struct sync_file_info *info) { return -1; }
        static inline void sync_accumulate(const char *name, int *fence_fd, int fd) {
            /* Stub: accumulate sync fences - do nothing on macOS */
        }
        
        #endif
        EOF
    - name: Install Python dependencies
      run: |
        python3 -m pip install --break-system-packages packaging mako PyYAML
    - name: Configure
      run: |
        LLVM_PREFIX=$(brew --prefix llvm)
        echo "LLVM_PREFIX: $LLVM_PREFIX"
        cat > native_config <<EOL
        [binaries]
        llvm-config = '${LLVM_PREFIX}/bin/llvm-config'
        EOL
        echo "Native config contents:"
        cat native_config
        echo "Running meson setup..."
        $MESON_EXEC setup . build --native-file=native_config -Dmoltenvk-dir=$(brew --prefix molten-vk) -Dbuild-tests=true -Dosmesa=false -Dgallium-drivers=virgl -Degl=disabled -Dglx=disabled -Dopengl=true -Dshared-glapi=enabled
    - name: Build
      run: $MESON_EXEC compile -C build
    - name: Test
      run: $MESON_EXEC test -C build --print-errorlogs
    - name: Install
      run: $MESON_EXEC install -C build --destdir $PWD/install
    - name: 'Upload Artifact'
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: macos-dri-result
        path: |
          build/meson-logs/
          install/
        retention-days: 5

  create-release:
    needs: macOS-CI
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release == 'true' && github.event.inputs.release_tag != ''
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-dri-result
        path: ./artifacts
        
    - name: Create package structure
      run: |
        cd artifacts
        mkdir -p mesa-virgl-macos
        
        # Copy installation files
        if [ -d "install" ]; then
          cp -r install/* mesa-virgl-macos/
        fi
        
    - name: Create release documentation
      run: |
        cd artifacts
        cat > mesa-virgl-macos/RELEASE_INFO.txt << 'EOF'
        Mesa VirGL for macOS - Development Build
        ========================================
        
        This is a custom Mesa VirGL build for macOS that provides VirGL driver support
        for QEMU GPU virtualization. The build enables QEMU compilation with VirGL
        support but has runtime limitations on macOS.
        
        Purpose:
        - Enables QEMU compilation with VirGL support on macOS
        - Provides VirGL gallium driver and OpenGL ES libraries
        - Allows building QEMU with VirGL renderer integration
        - Supports VirGL protocol development and debugging
        
        What This Enables:
        - QEMU configure --enable-virglrenderer --enable-opengl succeeds
        - pkg-config finds required OpenGL libraries during QEMU build
        - VirGL device compilation in QEMU (virtio-gpu-gl-pci)
        - Cross-platform QEMU VirGL development on macOS
        
        Runtime Limitations:
        - **Build configuration**: Current build focused on compilation support only
        - **Runtime integration**: Designed primarily for QEMU build-time linking
        - **Compile-time preferred**: Best integrated directly into QEMU build process
        - **Alternative**: Use system OpenGL for standard QEMU VM setups
        
        Libraries Included:
        - libGLESv2.dylib (OpenGL ES 2.0 implementation)
        - libGLESv1_CM.dylib (OpenGL ES 1.x Common profile)
        - libglapi.dylib (OpenGL API dispatch layer)
        - VirGL gallium driver modules
        - pkg-config files (glesv2.pc, glesv1_cm.pc)
        
        QEMU VirGL Integration Guide:
        ============================
        
        ## Prerequisites for QEMU VirGL Compilation
        
        1. **Install virglrenderer library** (required for QEMU VirGL):
           ```bash
           # Install dependencies for virglrenderer build
           brew install meson ninja pkg-config libepoxy
           
           # Build virglrenderer from source (not available in Homebrew)
           git clone https://gitlab.freedesktop.org/virgl/virglrenderer.git
           cd virglrenderer
           meson setup build
           meson compile -C build
           sudo meson install -C build
           
           # Alternative: Install to custom prefix to avoid system conflicts
           meson setup build --prefix=/opt/virglrenderer
           meson compile -C build
           sudo meson install -C build
           
           # If using custom prefix, add to PKG_CONFIG_PATH
           export PKG_CONFIG_PATH="/opt/virglrenderer/lib/pkgconfig:$PKG_CONFIG_PATH"
           ```
        
        2. **Install Mesa VirGL libraries** (this package):
           ```bash
           # Extract Mesa VirGL package
           tar -xzf mesa-virgl-macos-*.tar.gz
           
           # Install to isolated directory (recommended)
           sudo ./install.sh
           
           # OR install to Homebrew for seamless integration
           sudo ./install.sh --homebrew
           ```
        
        ## QEMU Configuration with Mesa VirGL
        
        ### Method 1: Isolated Mesa VirGL Installation
        
        ```bash
        # Set environment for QEMU configure
        export PKG_CONFIG_PATH="/opt/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
        export CFLAGS="-I/opt/mesa-virgl/include $CFLAGS"
        export LDFLAGS="-L/opt/mesa-virgl/lib $LDFLAGS"
        
        # Clone and configure QEMU
        git clone https://github.com/qemu/qemu.git
        cd qemu
        
        ./configure \
          --enable-virglrenderer \
          --enable-opengl \
          --extra-cflags="-I/opt/mesa-virgl/include" \
          --extra-ldflags="-L/opt/mesa-virgl/lib" \
          --pkg-config-path="/opt/mesa-virgl/lib/pkgconfig"
        
        # Build QEMU with VirGL support
        make -j$(sysctl -n hw.ncpu)
        ```
        
        ### Method 2: Homebrew Integration
        
        ```bash
        # With Homebrew installation, libraries are in standard paths
        # No environment variables or extra flags needed
        git clone https://github.com/qemu/qemu.git
        cd qemu
        
        ./configure \
          --enable-virglrenderer \
          --enable-opengl
        
        make -j$(sysctl -n hw.ncpu)
        ```
        
        ## VirGL Library Detection Verification
        
        Before building QEMU, verify Mesa VirGL libraries are detected:
        
        ```bash
        # Check pkg-config can find OpenGL ES libraries
        pkg-config --exists glesv2 && echo "✓ OpenGL ES 2.0 found"
        pkg-config --exists glesv1_cm && echo "✓ OpenGL ES 1.x found"
        
        # Show library paths
        pkg-config --cflags --libs glesv2
        pkg-config --cflags --libs glesv1_cm
        
        # Check virglrenderer detection
        pkg-config --exists virglrenderer && echo "✓ VirGL renderer found"
        ```
        
        ## VirGL vs Venus Protocol Clarification
        
        **VirGL OpenGL (Standard)**:
        - Basic 3D acceleration using OpenGL ES over virtio-gpu
        - Device: `virtio-gpu-gl-pci` (no additional parameters needed)
        - Supports OpenGL applications in guest
        - Works with most Linux distributions
        
        **Venus Vulkan Protocol** (since virglrenderer v1.0.0):
        - Vulkan API translation over virtio-gpu
        - Device: `virtio-gpu-gl-pci,hostmem=8G,blob=true,venus=true`
        - Requires host blob support and Venus-capable guest drivers
        - hostmem specifies virtio-gpu host memory window (256M-8G typical)
        - blob=true enables host memory blob resources for Venus
        - venus=true enables Venus Vulkan capability set
        
        ## QEMU VirGL Runtime Configuration
        
        After successful compilation, QEMU can use VirGL devices:
        
        ```bash
        # Basic VirGL OpenGL device (standard VirGL)
        qemu-system-x86_64 \
          -device virtio-gpu-gl-pci \
          -display sdl,gl=on \
          [other QEMU options...]
        
        # VirGL with Venus Vulkan support (requires virglrenderer v1.0.0+)
        qemu-system-x86_64 \
          -device virtio-gpu-gl-pci,hostmem=8G,blob=true,venus=true \
          -display sdl,gl=on \
          [other QEMU options...]
        
        # Advanced VirGL with multiple outputs
        qemu-system-x86_64 \
          -device virtio-gpu-gl-pci,max_outputs=2 \
          -display gtk,gl=on,show-cursor=on \
          -object memory-backend-memfd,id=mem,size=4G,share=on \
          -machine memory-backend=mem \
          [guest OS options...]
        ```
        
        ## VirGL Development Workflow
        
        ### 1. Mesa VirGL Library Development
        ```bash
        # Modify Mesa VirGL source and rebuild
        meson compile -C build
        sudo meson install -C build --destdir /path/to/staging
        
        # Update installation
        sudo ./install.sh --prefix=/opt/mesa-virgl
        ```
        
        ### 2. QEMU VirGL Integration Testing
        ```bash
        # Rebuild QEMU with updated Mesa VirGL
        cd qemu
        make clean
        make -j$(sysctl -n hw.ncpu)
        
        # Test VirGL functionality
        ./qemu-system-x86_64 -device virtio-gpu-gl-pci,blob=true -display sdl,gl=on
        ```
        
        ### 3. Cross-platform Deployment
        ```bash
        # Build QEMU with VirGL on macOS for Linux deployment
        ./configure --enable-virglrenderer --enable-opengl --target-list=x86_64-linux-user
        make -j$(sysctl -n hw.ncpu)
        
        # Package for Linux deployment
        tar -czf qemu-virgl-build.tar.gz build/
        ```
        
        ## Troubleshooting QEMU VirGL Compilation
        
        ### Library Detection Issues
        ```bash
        # If pkg-config can't find libraries:
        export PKG_CONFIG_PATH="/opt/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
        
        # If headers not found:
        export C_INCLUDE_PATH="/opt/mesa-virgl/include:$C_INCLUDE_PATH"
        export CPLUS_INCLUDE_PATH="/opt/mesa-virgl/include:$CPLUS_INCLUDE_PATH"
        
        # If linking fails:
        export LIBRARY_PATH="/opt/mesa-virgl/lib:$LIBRARY_PATH"
        export LD_LIBRARY_PATH="/opt/mesa-virgl/lib:$LD_LIBRARY_PATH"
        ```
        
        ### Verification Commands
        ```bash
        # Check if QEMU was built with VirGL support
        ./qemu-system-x86_64 -device help | grep virtio-gpu
        
        # Verify OpenGL support compiled in
        ./qemu-system-x86_64 -display help | grep gl
        
        # Test library linking
        otool -L ./qemu-system-x86_64 | grep -E "(virgl|gles|glapi)"
        ```
        
        QEMU Integration Use Cases:
        1. **QEMU Development**: Compile QEMU with VirGL support on macOS
        2. **Cross-platform Builds**: Build VirGL-enabled QEMU on macOS for Linux deployment
        3. **VirGL Protocol Work**: Develop and test VirGL protocol implementations
        4. **Build System Testing**: Verify QEMU VirGL integration compiles properly
        
        Build Information:
        - Mesa Version: 24.3.0-devel
        - Target: macOS (Darwin)
        - Architecture: Universal (ARM64 + x86_64)
        - Gallium Drivers: VirGL
        - Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - Git Commit: ${{ github.sha }}
        
        For more information, see: https://github.com/${{ github.repository }}
        EOF

    - name: Create installation scripts
      run: |
        cd artifacts
        # Create installation script
        cat > mesa-virgl-macos/install.sh << 'EOF'
        #!/bin/bash
        # Mesa VirGL macOS Installation Script
        
        set -e
        
        echo "Mesa VirGL for macOS - Installation Script"
        echo "=========================================="
        
        # Default to isolated installation, but allow Homebrew integration
        INSTALL_PREFIX="/opt/mesa-virgl"
        HOMEBREW_INSTALL=false
        
        # Parse command line arguments
        while [[ $# -gt 0 ]]; do
          case $1 in
            --homebrew)
              HOMEBREW_INSTALL=true
              INSTALL_PREFIX="/opt/homebrew"
              shift
              ;;
            --prefix=*)
              INSTALL_PREFIX="${1#*=}"
              shift
              ;;
            -h|--help)
              echo "Usage: $0 [--homebrew] [--prefix=PATH]"
              echo "  --homebrew    Install to Homebrew directories (/opt/homebrew)"
              echo "  --prefix=PATH Install to custom path (default: /opt/mesa-virgl)"
              exit 0
              ;;
            *)
              echo "Unknown option $1"
              echo "Use --help for usage information"
              exit 1
              ;;
          esac
        done
        
        if [ "$EUID" -ne 0 ]; then
          echo "Error: This script must be run as root (use sudo)"
          echo "Usage: sudo $0 [--homebrew] [--prefix=PATH]"
          exit 1
        fi
        
        # Source the installation functions
        source ./install-functions.sh
        
        # Run the installation
        main_install
        EOF

    - name: Create installation functions
      run: |
        cd artifacts
        # Create installation functions library
        cat > mesa-virgl-macos/install-functions.sh << 'EOF'
        #!/bin/bash
        # Mesa VirGL Installation Functions
        
        main_install() {
          if [ "$HOMEBREW_INSTALL" = true ]; then
            install_to_homebrew
          else
            install_isolated
          fi
          
          fix_pkgconfig_files
          set_permissions
          show_completion_message
        }
        
        install_to_homebrew() {
          echo "Installing Mesa VirGL to Homebrew directories: $INSTALL_PREFIX"
          echo "Warning: This will integrate with your existing Homebrew installation"
          echo "The script will preserve Homebrew ownership and permissions."
          echo ""
          echo "If you encounter permission issues, you may need to fix Homebrew ownership:"
          echo "  sudo chown -R \$(whoami) $INSTALL_PREFIX"
          echo ""
          read -p "Continue? [y/N]: " -n 1 -r
          echo
          if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Installation cancelled"
            exit 0
          fi
          
          # For Homebrew, ensure directories exist with proper ownership
          if [ ! -d "$INSTALL_PREFIX" ]; then
            echo "Warning: Homebrew directory $INSTALL_PREFIX does not exist"
            echo "This suggests Homebrew is not properly installed."
            echo "Please install Homebrew first: https://brew.sh"
            exit 1
          fi
          
          echo "Installing Mesa VirGL libraries..."
          echo "Installing to Homebrew with proper permissions..."
          
          # Get the current Homebrew directory owner
          HOMEBREW_OWNER=$(stat -f "%Su" "$INSTALL_PREFIX" 2>/dev/null || whoami 2>/dev/null || echo "$(logname)")
          HOMEBREW_GROUP=$(stat -f "%Sg" "$INSTALL_PREFIX" 2>/dev/null || id -gn 2>/dev/null || echo "admin")
          
          copy_files
          
          # Restore proper Homebrew ownership and permissions
          echo "Restoring Homebrew ownership to $HOMEBREW_OWNER:$HOMEBREW_GROUP"
          chown -R "$HOMEBREW_OWNER:$HOMEBREW_GROUP" "$INSTALL_PREFIX"
          
          # Set standard Homebrew permissions
          find "$INSTALL_PREFIX" -type d -exec chmod 755 {} \;
          find "$INSTALL_PREFIX" -type f -exec chmod 644 {} \;
          
          # Make executables and libraries executable
          find "$INSTALL_PREFIX" -name "*.dylib" -exec chmod 755 {} \;
          find "$INSTALL_PREFIX/bin" -type f -exec chmod 755 {} \; 2>/dev/null || true
        }
        
        install_isolated() {
          echo "Installing Mesa VirGL to isolated directory: $INSTALL_PREFIX"
          echo "Creating installation directory..."
          mkdir -p "$INSTALL_PREFIX"
          echo "Installing Mesa VirGL libraries..."
          copy_files
        }
        
        copy_files() {
          if [ -d "opt/homebrew" ]; then
            cp -r opt/homebrew/* "$INSTALL_PREFIX/"
          elif [ -d "opt" ]; then
            cp -r opt/* "$INSTALL_PREFIX/"
          elif [ -d "usr" ]; then
            cp -r usr/* "$INSTALL_PREFIX/"
          else
            echo "Warning: No standard installation structure found"
            cp -r * "$INSTALL_PREFIX/"
          fi
        }
        
        fix_pkgconfig_files() {
          echo "Fixing pkg-config files for installation path..."
          if [ "$HOMEBREW_INSTALL" = true ]; then
            # For Homebrew, ensure pkg-config directory exists with proper ownership
            HOMEBREW_OWNER=$(stat -f "%Su" "$INSTALL_PREFIX" 2>/dev/null || whoami 2>/dev/null || echo "$(logname)")
            HOMEBREW_GROUP=$(stat -f "%Sg" "$INSTALL_PREFIX" 2>/dev/null || id -gn 2>/dev/null || echo "admin")
            
            if [ ! -d "$INSTALL_PREFIX/lib/pkgconfig" ]; then
              echo "Creating pkg-config directory with proper Homebrew ownership..."
              mkdir -p "$INSTALL_PREFIX/lib/pkgconfig"
              chown "$HOMEBREW_OWNER:$HOMEBREW_GROUP" "$INSTALL_PREFIX/lib/pkgconfig"
              chmod 755 "$INSTALL_PREFIX/lib/pkgconfig"
            fi
          fi
          
          if [ -d "$INSTALL_PREFIX/lib/pkgconfig" ]; then
            # Update only Mesa VirGL pkg-config files to use the actual installation prefix
            MESA_PC_FILES=("gl.pc" "glesv2.pc" "glesv1_cm.pc" "egl.pc" "osmesa.pc")
            
            for pc_name in "${MESA_PC_FILES[@]}"; do
              pc_file="$INSTALL_PREFIX/lib/pkgconfig/$pc_name"
              if [ -f "$pc_file" ] && [ ! -L "$pc_file" ]; then
                echo "Updating Mesa VirGL pkg-config file: $pc_file"
                if [ "$HOMEBREW_INSTALL" = true ]; then
                  sed -i.bak "s|prefix=/opt/homebrew|prefix=$INSTALL_PREFIX|g" "$pc_file"
                  chown "$HOMEBREW_OWNER:$HOMEBREW_GROUP" "$pc_file"
                else
                  sed -i.bak "s|prefix=/opt/homebrew|prefix=$INSTALL_PREFIX|g" "$pc_file"
                fi
                rm "$pc_file.bak" 2>/dev/null || true
              fi
            done
          fi
        }
        
        set_permissions() {
          echo "Setting permissions..."
          if [ "$HOMEBREW_INSTALL" = true ]; then
            echo "Homebrew permissions already set correctly"
          else
            chmod -R 755 "$INSTALL_PREFIX"
          fi
        }
        
        show_completion_message() {
          echo "Installation complete!"
          echo "Mesa VirGL installed to: $INSTALL_PREFIX"
          echo ""
          if [ "$HOMEBREW_INSTALL" = true ]; then
            echo "Homebrew integration complete. Mesa VirGL libraries are now available"
            echo "through the standard Homebrew paths and should be found automatically"
            echo "by pkg-config and other build systems."
            echo ""
            echo "If you experience permission issues with Homebrew after installation:"
            echo "  sudo chown -R \$(whoami) $INSTALL_PREFIX"
            echo "  brew doctor  # to check for any permission issues"
          else
            echo "To use with QEMU development:"
            echo "  export PKG_CONFIG_PATH=\"$INSTALL_PREFIX/lib/pkgconfig:\$PKG_CONFIG_PATH\""
            echo ""
            echo "For QEMU configure:"
            echo "  --extra-cflags=\"-I$INSTALL_PREFIX/include\""
            echo "  --extra-ldflags=\"-L$INSTALL_PREFIX/lib\""
            echo "  --pkg-config-path=\"$INSTALL_PREFIX/lib/pkgconfig\""
          fi
        }
        EOF

    - name: Create safe installation script
      run: |
        cd artifacts
        cat > mesa-virgl-macos/install-homebrew-safe.sh << 'EOF'
        #!/bin/bash
        # Mesa VirGL macOS Safe Homebrew Installation Script
        # This script installs without changing Homebrew directory ownership
        
        set -e
        
        echo "Mesa VirGL for macOS - Safe Homebrew Installation"
        echo "================================================"
        echo ""
        echo "This script installs Mesa VirGL libraries to Homebrew directories"
        echo "while preserving proper ownership and permissions."
        echo ""
        
        # Check if we're in the right directory
        if [ ! -f "install.sh" ] || [ ! -d "opt" ] && [ ! -d "usr" ]; then
          echo "Error: This script must be run from the Mesa VirGL installation directory"
          echo "Make sure you've extracted the mesa-virgl-macos-*.tar.gz file first"
          exit 1
        fi
        
        # Check if Homebrew is installed
        if ! command -v brew &> /dev/null; then
          echo "Error: Homebrew is not installed or not in PATH"
          echo "Please install Homebrew first: https://brew.sh"
          exit 1
        fi
        
        HOMEBREW_PREFIX=$(brew --prefix)
        echo "Detected Homebrew installation: $HOMEBREW_PREFIX"
        echo ""
        
        # Check current user ownership of Homebrew
        if [ ! -w "$HOMEBREW_PREFIX/lib" ]; then
          echo "Warning: You don't have write access to Homebrew directories"
          echo "This is normal and expected. The script will use sudo only when needed."
          echo ""
        fi
        
        echo "Installing Mesa VirGL libraries to Homebrew..."
        
        # Create temporary staging directory
        STAGING_DIR="/tmp/mesa-virgl-staging-$$"
        mkdir -p "$STAGING_DIR"
        
        # Copy files to staging area first
        if [ -d "opt/homebrew" ]; then
          cp -r opt/homebrew/* "$STAGING_DIR/"
        elif [ -d "opt" ]; then
          cp -r opt/* "$STAGING_DIR/"
        elif [ -d "usr" ]; then
          cp -r usr/* "$STAGING_DIR/"
        else
          echo "Warning: No standard installation structure found"
          cp -r * "$STAGING_DIR/"
        fi
        
        # Install files to Homebrew with preserved permissions
        echo "Copying files to Homebrew directories..."
        
        # Install libraries
        if [ -d "$STAGING_DIR/lib" ]; then
          sudo cp -r "$STAGING_DIR/lib/"* "$HOMEBREW_PREFIX/lib/"
        fi
        
        # Install headers
        if [ -d "$STAGING_DIR/include" ]; then
          sudo cp -r "$STAGING_DIR/include/"* "$HOMEBREW_PREFIX/include/"
        fi
        
        # Ensure pkg-config directory exists with proper ownership
        if [ ! -d "$HOMEBREW_PREFIX/lib/pkgconfig" ]; then
          echo "Creating pkg-config directory..."
          sudo mkdir -p "$HOMEBREW_PREFIX/lib/pkgconfig"
        fi
        
        # Get the actual Homebrew directory owner (usually the user who installed Homebrew)
        HOMEBREW_OWNER=$(stat -f "%Su" "$HOMEBREW_PREFIX" 2>/dev/null || whoami)
        HOMEBREW_GROUP=$(stat -f "%Sg" "$HOMEBREW_PREFIX" 2>/dev/null || id -gn)
        
        echo "Restoring Homebrew ownership to $HOMEBREW_OWNER:$HOMEBREW_GROUP..."
        
        # Restore ownership of directories we may have created
        if [ -d "$HOMEBREW_PREFIX/lib/pkgconfig" ]; then
          sudo chown "$HOMEBREW_OWNER:$HOMEBREW_GROUP" "$HOMEBREW_PREFIX/lib/pkgconfig"
        fi
        
        # Restore ownership of the specific files we installed
        if [ -d "$HOMEBREW_PREFIX/lib" ]; then
          sudo find "$HOMEBREW_PREFIX/lib" -name "*mesa*" -o -name "*virgl*" -o -name "*gles*" -o -name "*glapi*" | \
            sudo xargs chown "$HOMEBREW_OWNER:$HOMEBREW_GROUP" 2>/dev/null || true
        fi
        
        if [ -d "$HOMEBREW_PREFIX/include" ]; then
          sudo find "$HOMEBREW_PREFIX/include" -name "*mesa*" -o -name "*virgl*" -o -name "*gl*" | \
            sudo xargs chown "$HOMEBREW_OWNER:$HOMEBREW_GROUP" 2>/dev/null || true
        fi
        
        # Fix pkg-config files
        if [ -d "$HOMEBREW_PREFIX/lib/pkgconfig" ]; then
          MESA_PC_FILES=(
            "gl.pc"
            "glesv2.pc" 
            "glesv1_cm.pc"
            "egl.pc"
            "osmesa.pc"
          )
          
          for pc_name in "${MESA_PC_FILES[@]}"; do
            pc_file="$HOMEBREW_PREFIX/lib/pkgconfig/$pc_name"
            if [ -f "$pc_file" ]; then
              echo "Updating Mesa VirGL pkg-config file: $pc_file"
              sudo sed -i.bak "s|prefix=/opt/homebrew|prefix=$HOMEBREW_PREFIX|g" "$pc_file"
              sudo rm "$pc_file.bak" 2>/dev/null || true
              sudo chown "$HOMEBREW_OWNER:$HOMEBREW_GROUP" "$pc_file"
            fi
          done
        fi
        
        # Set proper permissions
        echo "Setting correct permissions..."
        sudo find "$HOMEBREW_PREFIX/lib" -name "*.dylib" -exec chmod 755 {} \; 2>/dev/null || true
        sudo find "$HOMEBREW_PREFIX/lib/pkgconfig" -name "*.pc" -exec chmod 644 {} \; 2>/dev/null || true
        
        # Clean up staging directory
        rm -rf "$STAGING_DIR"
        
        echo ""
        echo "✅ Mesa VirGL installation complete!"
        echo ""
        echo "Libraries installed to: $HOMEBREW_PREFIX"
        echo "Mesa VirGL is now available through standard Homebrew paths."
        echo ""
        echo "To verify installation:"
        echo "  pkg-config --exists glesv2 && echo '✓ OpenGL ES 2.0 found'"
        echo "  pkg-config --cflags --libs glesv2"
        echo ""
        echo "For QEMU development, no extra configure flags needed:"
        echo "  ./configure --enable-virglrenderer --enable-opengl"
        
        EOF

    - name: Create safe installation functions
      run: |
        cd artifacts
        # Create safe installation functions library
        cat > mesa-virgl-macos/install-safe-functions.sh << 'EOF'
        #!/bin/bash
        # Mesa VirGL Safe Installation Functions
        
        safe_homebrew_install() {
          echo "Installing Mesa VirGL libraries to Homebrew..."
          
          # Create temporary staging directory
          STAGING_DIR="/tmp/mesa-virgl-staging-$$"
          mkdir -p "$STAGING_DIR"
          
          stage_files
          install_to_homebrew_dirs
          restore_homebrew_ownership
          fix_safe_pkgconfig
          cleanup_staging
          show_safe_completion
        }
        
        stage_files() {
          # Copy files to staging area first
          if [ -d "opt/homebrew" ]; then
            cp -r opt/homebrew/* "$STAGING_DIR/"
          elif [ -d "opt" ]; then
            cp -r opt/* "$STAGING_DIR/"
          elif [ -d "usr" ]; then
            cp -r usr/* "$STAGING_DIR/"
          else
            echo "Warning: No standard installation structure found"
            cp -r * "$STAGING_DIR/"
          fi
        }
        
        install_to_homebrew_dirs() {
          echo "Copying files to Homebrew directories..."
          
          # Install libraries
          if [ -d "$STAGING_DIR/lib" ]; then
            sudo cp -r "$STAGING_DIR/lib/"* "$HOMEBREW_PREFIX/lib/"
          fi
          
          # Install headers
          if [ -d "$STAGING_DIR/include" ]; then
            sudo cp -r "$STAGING_DIR/include/"* "$HOMEBREW_PREFIX/include/"
          fi
          
          # Ensure pkg-config directory exists with proper ownership
          if [ ! -d "$HOMEBREW_PREFIX/lib/pkgconfig" ]; then
            echo "Creating pkg-config directory..."
            sudo mkdir -p "$HOMEBREW_PREFIX/lib/pkgconfig"
          fi
        }
        
        restore_homebrew_ownership() {
          # Get the actual Homebrew directory owner (usually the user who installed Homebrew)
          HOMEBREW_OWNER=$(stat -f "%Su" "$HOMEBREW_PREFIX" 2>/dev/null || whoami)
          HOMEBREW_GROUP=$(stat -f "%Sg" "$HOMEBREW_PREFIX" 2>/dev/null || id -gn)
          
          echo "Restoring Homebrew ownership to $HOMEBREW_OWNER:$HOMEBREW_GROUP..."
          
          # Restore ownership of directories we may have created
          if [ -d "$HOMEBREW_PREFIX/lib/pkgconfig" ]; then
            sudo chown "$HOMEBREW_OWNER:$HOMEBREW_GROUP" "$HOMEBREW_PREFIX/lib/pkgconfig"
          fi
          
          # Restore ownership of the specific files we installed
          if [ -d "$HOMEBREW_PREFIX/lib" ]; then
            sudo find "$HOMEBREW_PREFIX/lib" -name "*mesa*" -o -name "*virgl*" -o -name "*gles*" -o -name "*glapi*" | \
              sudo xargs chown "$HOMEBREW_OWNER:$HOMEBREW_GROUP" 2>/dev/null || true
          fi
          
          if [ -d "$HOMEBREW_PREFIX/include" ]; then
            sudo find "$HOMEBREW_PREFIX/include" -name "*mesa*" -o -name "*virgl*" -o -name "*gl*" | \
              sudo xargs chown "$HOMEBREW_OWNER:$HOMEBREW_GROUP" 2>/dev/null || true
          fi
        }
        
        fix_safe_pkgconfig() {
          # Fix pkg-config files
          if [ -d "$HOMEBREW_PREFIX/lib/pkgconfig" ]; then
            MESA_PC_FILES=("gl.pc" "glesv2.pc" "glesv1_cm.pc" "egl.pc" "osmesa.pc")
            
            for pc_name in "${MESA_PC_FILES[@]}"; do
              pc_file="$HOMEBREW_PREFIX/lib/pkgconfig/$pc_name"
              if [ -f "$pc_file" ]; then
                echo "Updating Mesa VirGL pkg-config file: $pc_file"
                sudo sed -i.bak "s|prefix=/opt/homebrew|prefix=$HOMEBREW_PREFIX|g" "$pc_file"
                sudo rm "$pc_file.bak" 2>/dev/null || true
                sudo chown "$HOMEBREW_OWNER:$HOMEBREW_GROUP" "$pc_file"
              fi
            done
          fi
          
          # Set proper permissions
          echo "Setting correct permissions..."
          sudo find "$HOMEBREW_PREFIX/lib" -name "*.dylib" -exec chmod 755 {} \; 2>/dev/null || true
          sudo find "$HOMEBREW_PREFIX/lib/pkgconfig" -name "*.pc" -exec chmod 644 {} \; 2>/dev/null || true
        }
        
        cleanup_staging() {
          # Clean up staging directory
          rm -rf "$STAGING_DIR"
        }
        
        show_safe_completion() {
          echo ""
          echo "✅ Mesa VirGL installation complete!"
          echo ""
          echo "Libraries installed to: $HOMEBREW_PREFIX"
          echo "Mesa VirGL is now available through standard Homebrew paths."
          echo ""
          echo "To verify installation:"
          echo "  pkg-config --exists glesv2 && echo '✓ OpenGL ES 2.0 found'"
          echo "  pkg-config --cflags --libs glesv2"
          echo ""
          echo "For QEMU development, no extra configure flags needed:"
          echo "  ./configure --enable-virglrenderer --enable-opengl"
        }
        EOF

    - name: Create uninstall scripts
      run: |
        cd artifacts
        # Create uninstall script
        cat > mesa-virgl-macos/uninstall.sh << 'EOF'
        #!/bin/bash
        # Mesa VirGL macOS Uninstall Script
        
        set -e
        
        echo "Mesa VirGL for macOS - Uninstall Script"
        echo "======================================="
        
        if [ "$EUID" -ne 0 ]; then
          echo "Error: This script must be run as root (use sudo)"
          echo "Usage: sudo ./uninstall.sh [custom_path]"
          exit 1
        fi
        
        # Source the uninstall functions
        source ./uninstall-functions.sh
        
        # Run the uninstall
        main_uninstall "$1"
        EOF

    - name: Create uninstall functions
      run: |
        cd artifacts
        # Create uninstall functions library
        cat > mesa-virgl-macos/uninstall-functions.sh << 'EOF'
        #!/bin/bash
        # Mesa VirGL Uninstall Functions
        
        main_uninstall() {
          local custom_path="$1"
          
          echo "Searching for Mesa VirGL installations..."
          
          FOUND_INSTALLATIONS=()
          search_installations "$custom_path"
          
          if [ ${#FOUND_INSTALLATIONS[@]} -eq 0 ]; then
            echo "No Mesa VirGL installations found."
            echo ""
            echo "If you installed to a custom location, run:"
            echo "  sudo ./uninstall.sh /path/to/custom/directory"
            exit 0
          fi
          
          show_found_installations
          confirm_removal
          remove_installations
          show_cleanup_message
        }
        
        search_installations() {
          local custom_path="$1"
          
          # Check for directory installations
          for dir in "/opt/mesa-virgl" "/usr/local/mesa-virgl"; do
            if [ -d "$dir" ]; then
              echo "Found Mesa VirGL installation: $dir"
              FOUND_INSTALLATIONS+=("$dir")
            fi
          done
          
          # Check for Homebrew integration
          search_homebrew_files
          
          # Check custom directory if provided
          if [ "$custom_path" != "" ] && [ -d "$custom_path" ]; then
            echo "Found custom Mesa VirGL installation: $custom_path"
            FOUND_INSTALLATIONS+=("$custom_path")
          fi
        }
        
        search_homebrew_files() {
          HOMEBREW_FILES=(
            "/opt/homebrew/lib/libGLESv2.2.dylib"
            "/opt/homebrew/lib/libGLESv2.dylib"
            "/opt/homebrew/lib/libGLESv1_CM.2.dylib"
            "/opt/homebrew/lib/libGLESv1_CM.dylib"
            "/opt/homebrew/lib/libglapi.0.dylib"
            "/opt/homebrew/lib/libglapi.dylib"
            "/opt/homebrew/lib/pkgconfig/gl.pc"
            "/opt/homebrew/lib/pkgconfig/glesv2.pc"
            "/opt/homebrew/lib/pkgconfig/glesv1_cm.pc"
            "/opt/homebrew/lib/pkgconfig/egl.pc"
            "/opt/homebrew/lib/pkgconfig/osmesa.pc"
          )
          
          HOMEBREW_MESA_FILES=()
          for file in "${HOMEBREW_FILES[@]}"; do
            if [ -f "$file" ] || [ -L "$file" ]; then
              HOMEBREW_MESA_FILES+=("$file")
            fi
          done
          
          if [ ${#HOMEBREW_MESA_FILES[@]} -gt 0 ]; then
            echo "Found Mesa VirGL files in Homebrew directory:"
            printf '  %s\n' "${HOMEBREW_MESA_FILES[@]}"
            FOUND_INSTALLATIONS+=("HOMEBREW_FILES")
          fi
        }
        
        show_found_installations() {
          echo ""
          echo "Found ${#FOUND_INSTALLATIONS[@]} Mesa VirGL installation(s):"
          for installation in "${FOUND_INSTALLATIONS[@]}"; do
            if [ "$installation" = "HOMEBREW_FILES" ]; then
              echo "  - Homebrew integration (individual files)"
            else
              echo "  - $installation"
            fi
          done
        }
        
        confirm_removal() {
          echo ""
          read -p "Do you want to remove ALL found Mesa VirGL installations? [y/N]: " -n 1 -r
          echo
          if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Uninstall cancelled."
            exit 0
          fi
        }
        
        remove_installations() {
          echo ""
          echo "Removing Mesa VirGL installations..."
          
          for installation in "${FOUND_INSTALLATIONS[@]}"; do
            if [ "$installation" = "HOMEBREW_FILES" ]; then
              echo "Removing Homebrew Mesa VirGL files..."
              for file in "${HOMEBREW_MESA_FILES[@]}"; do
                if [ -f "$file" ] || [ -L "$file" ]; then
                  echo "  Removing: $file"
                  rm -f "$file"
                fi
              done
            else
              if [ -d "$installation" ]; then
                echo "Removing directory: $installation"
                rm -rf "$installation"
              fi
            fi
          done
        }
        
        show_cleanup_message() {
          echo ""
          echo "Mesa VirGL uninstall complete!"
          echo ""
          echo "Note: You may want to clean up environment variables:"
          echo "  - Remove DYLD_LIBRARY_PATH entries for Mesa VirGL"
          echo "  - Remove PKG_CONFIG_PATH entries for Mesa VirGL"
          echo "  - Remove MESA_LOADER_DRIVER_OVERRIDE=virpipe"
          echo ""
          echo "Check your shell configuration files:"
          echo "  ~/.zshrc, ~/.bashrc, ~/.profile"
        }
        EOF

    - name: Create README and finalize
      run: |
        cd artifacts
        chmod +x mesa-virgl-macos/install.sh
        chmod +x mesa-virgl-macos/install-functions.sh
        chmod +x mesa-virgl-macos/install-homebrew-safe.sh
        chmod +x mesa-virgl-macos/install-safe-functions.sh
        chmod +x mesa-virgl-macos/uninstall.sh
        chmod +x mesa-virgl-macos/uninstall-functions.sh
        
        # Create README with installation and uninstall instructions
        cat > mesa-virgl-macos/README.md << 'EOF'
        # Mesa VirGL for macOS
        
        Custom Mesa VirGL build for QEMU development on macOS with Apple Silicon.
        
        ## Installation Options
        
        ### Option 1: Isolated Installation (Recommended for Development)
        Install to an isolated directory to avoid conflicts with system libraries:
        
        ```bash
        sudo ./install.sh
        ```
        
        This installs to `/opt/mesa-virgl/` by default.
        
        ### Option 2: Homebrew Integration (Safe Method - Recommended)
        Install directly to Homebrew directories while preserving ownership:
        
        ```bash
        ./install-homebrew-safe.sh
        ```
        
        This method preserves Homebrew ownership and doesn't require changing permissions.
        
        ### Option 2b: Homebrew Integration (Direct Method)
        Install directly to Homebrew directories (may require ownership fixes):
        
        ```bash
        sudo ./install.sh --homebrew
        ```
        
        If you encounter permission issues after this, run:
        ```bash
        sudo chown -R $(whoami) /opt/homebrew
        ```
        
        ### Option 3: Custom Location
        Install to a custom path:
        
        ```bash
        sudo ./install.sh --prefix=/path/to/custom/location
        ```
        
        ## Usage
        
        ### For QEMU VirGL Development
        
        **Step 1: Install Prerequisites**
        ```bash
        # Install build dependencies
        brew install meson ninja pkg-config libepoxy
        
        # Build VirGL renderer from source (not available in Homebrew)
        git clone https://gitlab.freedesktop.org/virgl/virglrenderer.git
        cd virglrenderer
        meson setup build
        meson compile -C build
        sudo meson install -C build
        ```
        
        **Step 2: Configure Environment (Isolated Installation)**
        ```bash
        export PKG_CONFIG_PATH="/opt/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
        
        # QEMU configure example:
        ./configure \\
          --enable-virglrenderer \\
          --enable-opengl \\
          --extra-cflags="-I/opt/mesa-virgl/include" \\
          --extra-ldflags="-L/opt/mesa-virgl/lib" \\
          --pkg-config-path="/opt/mesa-virgl/lib/pkgconfig"
        
        # Build QEMU
        make -j$(sysctl -n hw.ncpu)
        ```
        
        **Step 3: Verify VirGL Integration**
        ```bash
        # Check VirGL device support
        ./qemu-system-x86_64 -device help | grep virtio-gpu
        
        # Test basic VirGL OpenGL VM
        ./qemu-system-x86_64 \\
          -device virtio-gpu-gl-pci \\
          -display sdl,gl=on \\
          [your VM options...]
        
        # Test VirGL with Venus Vulkan (requires virglrenderer v1.0.0+)
        ./qemu-system-x86_64 \\
          -device virtio-gpu-gl-pci,hostmem=8G,blob=true,venus=true \\
          -display sdl,gl=on \\
          [your VM options...]
        ```
        
        ### For Homebrew Installation
        Libraries are automatically available through standard Homebrew paths - no environment setup needed:
        
        ```bash
        # Safe Homebrew installation (recommended)
        ./install-homebrew-safe.sh
        
        # OR standard installation with potential ownership fix
        sudo ./install.sh --homebrew
        # If needed: sudo chown -R $(whoami) /opt/homebrew
        
        # QEMU configure works directly without extra flags:
        cd qemu
        ./configure --enable-virglrenderer --enable-opengl
        make -j$(sysctl -n hw.ncpu)
        ```
        
        ## Uninstall
        
        ### Automatic Uninstall
        ```bash
        sudo ./uninstall.sh
        ```
        
        This automatically detects and removes Mesa VirGL from common locations:
        - `/opt/mesa-virgl/` (isolated installations)
        - `/usr/local/mesa-virgl/` (custom installations)  
        - `/opt/homebrew/` (Homebrew integration files)
        
        ### Manual Uninstall for Custom Locations
        ```bash
        sudo ./uninstall.sh /path/to/custom/location
        ```
        
        ## Files Included
        
        - `install.sh` - Installation script with multiple options
        - `install-homebrew-safe.sh` - Safe Homebrew installation (preserves ownership)
        - `uninstall.sh` - Automatic uninstall script
        - `RELEASE_INFO.txt` - Detailed build and usage information
        - Mesa VirGL libraries and headers
        - pkg-config files for build system integration
        
        For detailed documentation, see `RELEASE_INFO.txt`.
        EOF

    - name: Create archive
      run: |
        cd artifacts
        # Create archive with contents directly (no wrapper directory)
        cd mesa-virgl-macos
        echo "Creating compressed archive..."
        tar -czf ../mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz .
        cd ..
        
        # Verify archive was created correctly
        echo "Archive created:"
        ls -la mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        file mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        
        # Calculate checksums
        sha256sum mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz > mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz.sha256
        
        echo "Release package created:"
        ls -la mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz*
        echo "Archive file type:"
        file mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.release_tag }}
        release_name: Mesa VirGL ${{ github.event.inputs.release_tag }}
        body: |
          # Mesa VirGL for macOS - ${{ github.event.inputs.release_tag }}
          
          Mesa VirGL build for macOS that enables QEMU compilation with VirGL support.
          
          ## 🎯 Primary Purpose: QEMU VirGL Development
          
          This build serves QEMU developers who need VirGL support compiled into QEMU on macOS:
          
          - **QEMU Build Support**: Enables `./configure --enable-virglrenderer --enable-opengl` 
          - **VirGL Development**: Provides libraries needed for QEMU VirGL renderer compilation
          - **Cross-platform Development**: Build VirGL-enabled QEMU on macOS for deployment elsewhere
          - **Protocol Development**: Test VirGL protocol implementations during QEMU development
          
          ## 🚀 What This Enables for QEMU
          
          ### QEMU Configuration Success
          ```bash
          # These QEMU configure options work with this Mesa VirGL build:
          ./configure \\
            --enable-virglrenderer \\
            --enable-opengl \\
            --extra-cflags="-I/opt/mesa-virgl/include" \\
            --extra-ldflags="-L/opt/mesa-virgl/lib" \\
            --pkg-config-path="/opt/mesa-virgl/lib/pkgconfig"
          ```
          
          ### QEMU VirGL Device Support
          ```bash
          # Standard VirGL OpenGL device (basic 3D acceleration):
          -device virtio-gpu-gl-pci
          -display sdl,gl=on
          
          # VirGL with Venus Vulkan support (requires virglrenderer v1.0.0+):
          -device virtio-gpu-gl-pci,hostmem=8G,blob=true,venus=true
          -display sdl,gl=on
          ```
          
          ### Build System Integration
          - pkg-config finds `glesv2.pc` for OpenGL ES 2.0 support
          - Headers and libraries available for VirGL renderer compilation
          - VirGL gallium driver modules included for protocol development
          
          ## 📦 Libraries for QEMU VirGL Development
          
          **Core OpenGL Libraries**:
          - `libGLESv2.dylib` - OpenGL ES 2.0 (what VirGL actually uses)
          - `libGLESv1_CM.dylib` - OpenGL ES 1.x Common profile  
          - `libglapi.dylib` - OpenGL API dispatch layer
          
          **VirGL Components**:
          - VirGL gallium driver modules
          - VirGL protocol headers and interfaces
          - Mesa VirGL renderer implementation
          
          **Build Integration**:
          - `glesv2.pc`, `glesv1_cm.pc` - pkg-config files for QEMU build system
          - Headers for OpenGL ES and VirGL development
          - Compatible with QEMU's VirGL renderer requirements
          
          ## ⚠️ Runtime Library Considerations
          
          **Important**: Current build optimized for QEMU compilation:
          
          - **Compilation Focus**: Build optimized for QEMU development and compilation
          - **Direct Integration**: Best results with compile-time QEMU linking
          - **macOS Compatibility**: Standard runtime usage may require additional configuration
          - **Development Purpose**: Designed primarily for QEMU VirGL development workflow
          
          ## 🛠 Complete QEMU VirGL Integration Guide
          
          ### Prerequisites
          
          **1. Install VirGL Renderer Library**
          ```bash
          # Install build dependencies
          brew install meson ninja pkg-config libepoxy
          
          # Build virglrenderer from source (not available in Homebrew)
          git clone https://gitlab.freedesktop.org/virgl/virglrenderer.git
          cd virglrenderer
          meson setup build
          meson compile -C build
          sudo meson install -C build
          ```
          
          **2. Install Mesa VirGL Libraries (this package)**
          ```bash
          # Extract and install Mesa VirGL
          tar -xzf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
          sudo ./install.sh
          ```
          
          ### QEMU Compilation with VirGL Support
          
          **Method 1: Isolated Mesa VirGL Installation**
          ```bash
          # Set environment for Mesa VirGL detection
          export PKG_CONFIG_PATH="/opt/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
          
          # Clone and configure QEMU
          git clone https://github.com/qemu/qemu.git
          cd qemu
          
          ./configure \\
            --enable-virglrenderer \\
            --enable-opengl \\
            --extra-cflags="-I/opt/mesa-virgl/include" \\
            --extra-ldflags="-L/opt/mesa-virgl/lib" \\
            --pkg-config-path="/opt/mesa-virgl/lib/pkgconfig"
          
          # Build QEMU with VirGL
          make -j$(sysctl -n hw.ncpu)
          ```
          
          **Method 2: Homebrew Integration (Simplified)**
          ```bash
          # Install Mesa VirGL to Homebrew
          sudo ./install.sh --homebrew
          
          # QEMU configure finds libraries automatically - no extra flags needed
          cd qemu
          ./configure --enable-virglrenderer --enable-opengl
          make -j$(sysctl -n hw.ncpu)
          ```
          
          ### Verification of VirGL Integration
          
          **Check Library Detection:**
          ```bash
          # Verify OpenGL ES libraries are found
          pkg-config --exists glesv2 && echo "✓ OpenGL ES 2.0 detected"
          pkg-config --exists virglrenderer && echo "✓ VirGL renderer detected"
          
          # Show library paths QEMU will use
          pkg-config --cflags --libs glesv2 virglrenderer
          ```
          
          **Verify QEMU VirGL Support:**
          ```bash
          # Check VirGL devices are available
          ./qemu-system-x86_64 -device help | grep virtio-gpu
          
          # Verify OpenGL display support
          ./qemu-system-x86_64 -display help | grep gl
          ```
          
          ### Running QEMU with VirGL
          
          **Basic VirGL OpenGL Setup:**
          ```bash
          ./qemu-system-x86_64 \\
            -device virtio-gpu-gl-pci \\
            -display sdl,gl=on \\
            -m 4G \\
            [your VM disk and options...]
          ```
          
          **VirGL with Venus Vulkan Support:**
          ```bash
          # Requires virglrenderer v1.0.0+ and Venus-enabled guest drivers
          ./qemu-system-x86_64 \\
            -device virtio-gpu-gl-pci,hostmem=8G,blob=true,venus=true \\
            -display sdl,gl=on \\
            -m 4G \\
            [your VM disk and options...]
          ```
          
          **Advanced VirGL Configuration:**
          ```bash
          ./qemu-system-x86_64 \\
            -device virtio-gpu-gl-pci,max_outputs=2 \\
            -display gtk,gl=on,show-cursor=on \\
            -object memory-backend-memfd,id=mem,size=4G,share=on \\
            -machine memory-backend=mem \\
            [guest OS configuration...]
          ```
          
          ## 🔧 VirGL Development Use Cases
          
          ### Cross-platform QEMU Development
          - Develop QEMU VirGL features on macOS
          - Test VirGL renderer compilation and integration
          - Build QEMU with VirGL for Linux deployment
          
          ### VirGL Protocol Development  
          - Access VirGL gallium driver source and headers
          - Test VirGL protocol implementations
          - Debug VirGL renderer integration in QEMU
          
          ### Build System Validation
          - Verify QEMU VirGL dependencies resolve correctly
          - Test pkg-config integration for OpenGL ES libraries
          - Validate VirGL renderer compilation on macOS
          
          ## ✅ Installation for QEMU Development
          
          Install to isolated directory to support QEMU compilation:
          
          ```bash
          tar -xzf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
          sudo ./install.sh
          ```
          
          This provides the libraries and headers needed for QEMU VirGL compilation without interfering with system OpenGL.
          
          ## 📊 Build Information
          - **Mesa Version**: 24.3.0-devel  
          - **Target**: macOS (Darwin) - QEMU development support
          - **Gallium Drivers**: VirGL
          - **Purpose**: QEMU VirGL compilation enablement
          - **Git Commit**: ${{ github.sha }}
          
          For QEMU VirGL development support and integration questions, see the [project repository](https://github.com/${{ github.repository }}).
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        asset_name: mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Release Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz.sha256
        asset_name: mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz.sha256
        asset_content_type: text/plain
