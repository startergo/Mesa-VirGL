name: macOS-CI
on:
  push:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean
      release_tag:
        description: 'Release tag (e.g., v24.3.0-virgl-1)'
        required: false
        default: ''
        type: string

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  macOS-CI:
    runs-on: macos-latest
    env:
      GALLIUM_DUMP_CPU: true
      MESON_EXEC: meson
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install Dependencies
      run: |
        cat > Brewfile <<EOL
        brew "bison"
        brew "expat"
        brew "gettext"
        brew "libx11"
        brew "libxcb"
        brew "libxdamage"
        brew "libxext"
        brew "libxrandr"
        brew "libxxf86vm"
        brew "libxfixes"
        brew "libxshmfence"
        brew "libxmu"
        brew "libxi"
        brew "molten-vk"
        brew "ninja"
        brew "pkg-config"
        brew "python@3.10"
        brew "meson"
        brew "llvm"
        EOL

        brew update
        brew bundle --verbose
        
        # Install XQuartz for X11 and DRM headers
        brew install --cask xquartz
        
        # Create comprehensive DRM headers for macOS compatibility  
        sudo mkdir -p /usr/local/include
        sudo tee /usr/local/include/xf86drm.h > /dev/null <<'EOF'
        #ifndef _XF86DRM_H_
        #define _XF86DRM_H_
        /* Comprehensive DRM header for macOS Mesa VirGL build */
        
        #include <stdint.h>
        #include <sys/types.h>
        #include <sys/ioccom.h>
        
        /* Only define if not already defined by Mesa's drm-uapi headers */
        #ifndef DRM_NODE_PRIMARY
        #define DRM_NODE_PRIMARY 0
        #define DRM_NODE_RENDER 2
        #endif
        
        #ifndef DRM_CLOEXEC
        #define DRM_CLOEXEC 0x80000000
        #endif
        
        /* Basic DRM types - only if not defined */
        #ifndef _DRM_H_
        typedef int drmDevice;
        typedef int drmDevicePtr;
        typedef struct drm_version *drmVersionPtr;
        #endif
        
        /* Additional DRM function stubs needed by VirGL */
        static inline int drmPrimeFDToHandle(int fd, int prime_fd, uint32_t *handle) {
            /* Stub: always fail gracefully */
            return -1;
        }
        
        static inline int drmPrimeHandleToFD(int fd, uint32_t handle, uint32_t flags, int *prime_fd) {
            /* Stub: always fail gracefully */
            return -1;
        }
        
        static inline drmVersionPtr drmGetVersion(int fd) {
            /* Stub: return NULL to indicate no version info */
            return NULL;
        }
        
        static inline void drmFreeVersion(drmVersionPtr version) {
            /* Stub: nothing to free */
        }
        
        /* Main DRM ioctl stub */
        static inline int drmIoctl(int fd, unsigned long request, void *arg) {
            /* Always return success for stubs */
            return 0;
        }
        
        #endif
        EOF
        
        # Create stub libsync header for macOS compatibility
        sudo tee /usr/local/include/libsync.h > /dev/null <<'EOF'
        #ifndef _LIBSYNC_H_
        #define _LIBSYNC_H_
        /* Stub libsync header for macOS Mesa VirGL build */
        
        #include <stdint.h>
        
        /* Android/Linux sync fence functionality stubs */
        #define SYNC_IOC_WAIT       1
        #define SYNC_IOC_MERGE      2
        #define SYNC_IOC_INFO       3
        #define SYNC_IOC_FILE_INFO  4
        
        struct sync_fence_info {
            char name[32];
            int status;
            uint64_t timestamp;
        };
        
        struct sync_file_info {
            char name[32];
            int status;
            uint32_t num_fences;
            struct sync_fence_info *fences;
        };
        
        /* Stub function declarations */
        static inline int sync_wait(int fd, int timeout) { return 0; }
        static inline int sync_merge(const char *name, int fd1, int fd2) { return -1; }
        static inline int sync_fence_info(int fd, struct sync_file_info *info) { return -1; }
        static inline void sync_accumulate(const char *name, int *fence_fd, int fd) {
            /* Stub: accumulate sync fences - do nothing on macOS */
        }
        
        #endif
        EOF
    - name: Install Python dependencies
      run: |
        python3 -m pip install --break-system-packages packaging mako PyYAML
    - name: Configure
      run: |
        LLVM_PREFIX=$(brew --prefix llvm)
        echo "LLVM_PREFIX: $LLVM_PREFIX"
        cat > native_config <<EOL
        [binaries]
        llvm-config = '${LLVM_PREFIX}/bin/llvm-config'
        EOL
        echo "Native config contents:"
        cat native_config
        echo "Running meson setup..."
        $MESON_EXEC setup . build --native-file=native_config -Dmoltenvk-dir=$(brew --prefix molten-vk) -Dbuild-tests=true -Dosmesa=false -Dgallium-drivers=virgl -Degl=disabled -Dglx=disabled -Dopengl=true -Dshared-glapi=enabled
    - name: Build
      run: $MESON_EXEC compile -C build
    - name: Test
      run: $MESON_EXEC test -C build --print-errorlogs
    - name: Install
      run: $MESON_EXEC install -C build --destdir $PWD/install
    - name: Create libGL.dylib for QEMU VirGL compatibility
      run: |
        # Navigate to the installed lib directory
        cd install/opt/homebrew/lib
        
        # QEMU VirGL expects libGL.dylib but Mesa on macOS only creates OpenGL ES libraries
        # Create a compatibility symlink that points to the OpenGL ES 2.0 library
        # This allows QEMU VirGL to find and use the OpenGL functionality
        if [ -f "libGLESv2.2.dylib" ] && [ ! -f "libGL.1.dylib" ]; then
          echo "Creating libGL.dylib compatibility symlink for QEMU VirGL..."
          ln -sf libGLESv2.2.dylib libGL.1.dylib
          ln -sf libGL.1.dylib libGL.dylib
          echo "✓ Created libGL.dylib -> libGLESv2.2.dylib symlink"
        fi
        
        # Also create a gl.pc pkg-config file for desktop OpenGL
        cd pkgconfig
        if [ ! -f "gl.pc" ] && [ -f "glesv2.pc" ]; then
          echo "Creating gl.pc pkg-config file for desktop OpenGL compatibility..."
          sed 's/glesv2/gl/g; s/GLESv2/GL/g; s/OpenGL ES/OpenGL/g' glesv2.pc > gl.pc
          echo "✓ Created gl.pc based on glesv2.pc"
        fi
        
        echo "Mesa VirGL macOS libraries prepared:"
        ls -la ../lib*.dylib
        echo "Pkg-config files:"
        ls -la *.pc
    - name: 'Upload Artifact'
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: macos-dri-result
        path: |
          build/meson-logs/
          install/
        retention-days: 5

  create-release:
    needs: macOS-CI
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release == 'true' && github.event.inputs.release_tag != ''
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-dri-result
        path: ./artifacts
        
    - name: Create release archive
      run: |
        cd artifacts
        # Create a comprehensive release package
        mkdir -p mesa-virgl-macos
        
        # Copy installation files
        if [ -d "install" ]; then
          cp -r install/* mesa-virgl-macos/
        fi
        
        # Create release info
        cat > mesa-virgl-macos/RELEASE_INFO.txt << 'EOF'
        Mesa VirGL for macOS - Release Build
        ====================================
        
        This is a custom Mesa build optimized for VirGL on macOS with Apple Silicon.
        
        Key Features:
        - VirGL driver support for GPU virtualization  
        - Full OpenGL library support
        - Shared OpenGL API implementation
        - Metal-to-OpenGL translation compatibility
        - Optimized for QEMU virtualization on macOS
        - ARM64 and x86_64 support
        
        Library Differences from Linux Build:
        - macOS uses .dylib files instead of .so files
        - Includes libGL.dylib (full OpenGL, equivalent to libGL.so.1)
        - Includes libglapi.dylib (equivalent to libglapi.so.0)
        - No OSMesa libraries (not needed for QEMU virtualization)
        - No EGL/OpenGL ES libraries (not supported on macOS Mesa)
        - Should be closer in size to Linux build with focused QEMU support
        
        Installation:
        1. Extract this package
        2. Copy contents to /opt/mesa-virgl/ (requires sudo)
        3. Use with QEMU VirGL for accelerated graphics
        
        Build Information:
        - Mesa Version: 24.3.0-devel
        - Target: macOS (Darwin)
        - Architecture: Universal (ARM64 + x86_64)
        - Gallium Drivers: VirGL
        - Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - Git Commit: ${{ github.sha }}
        
        For more information, see: https://github.com/${{ github.repository }}
        EOF
        
        # Create installation script
        cat > mesa-virgl-macos/install.sh << 'EOF'
        #!/bin/bash
        # Mesa VirGL macOS Installation Script
        
        set -e
        
        echo "Mesa VirGL for macOS - Installation Script"
        echo "=========================================="
        
        INSTALL_PREFIX="/opt/mesa-virgl"
        
        if [ "$EUID" -ne 0 ]; then
          echo "Error: This script must be run as root (use sudo)"
          exit 1
        fi
        
        echo "Creating installation directory..."
        mkdir -p "$INSTALL_PREFIX"
        
        echo "Installing Mesa VirGL libraries..."
        if [ -d "opt/homebrew" ]; then
          cp -r opt/homebrew/* "$INSTALL_PREFIX/"
        elif [ -d "opt" ]; then
          cp -r opt/* "$INSTALL_PREFIX/"
        elif [ -d "usr" ]; then
          cp -r usr/* "$INSTALL_PREFIX/"
        else
          echo "Warning: No standard installation structure found"
          cp -r * "$INSTALL_PREFIX/"
        fi
        
        echo "Fixing pkg-config files for custom installation path..."
        if [ -d "$INSTALL_PREFIX/lib/pkgconfig" ]; then
          # Update pkg-config files to use the actual installation prefix
          for pc_file in "$INSTALL_PREFIX/lib/pkgconfig"/*.pc; do
            if [ -f "$pc_file" ]; then
              echo "Updating $pc_file..."
              sed -i.bak "s|prefix=/opt/homebrew|prefix=$INSTALL_PREFIX|g" "$pc_file"
              rm "$pc_file.bak" 2>/dev/null || true
            fi
          done
        fi
        
        echo "Setting permissions..."
        chmod -R 755 "$INSTALL_PREFIX"
        
        echo "Installation complete!"
        echo "Mesa VirGL installed to: $INSTALL_PREFIX"
        echo ""
        echo "To use with QEMU:"
        echo "  export DYLD_LIBRARY_PATH=\"$INSTALL_PREFIX/lib:\$DYLD_LIBRARY_PATH\""
        echo "  export PKG_CONFIG_PATH=\"$INSTALL_PREFIX/lib/pkgconfig:\$PKG_CONFIG_PATH\""
        echo ""
        echo "Pkg-config files have been updated for the installation path."
        echo "For integration with QEMU-3dfx, see the project documentation."
        EOF
        
        chmod +x mesa-virgl-macos/install.sh
        
        # Create archive
        tar -czf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz mesa-virgl-macos
        
        # Calculate checksums
        sha256sum mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz > mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz.sha256
        
        echo "Release package created:"
        ls -la mesa-virgl-macos-${{ github.event.inputs.release_tag }}.*
        
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.release_tag }}
        release_name: Mesa VirGL ${{ github.event.inputs.release_tag }}
        body: |
          # Mesa VirGL for macOS - ${{ github.event.inputs.release_tag }}
          
          This release provides a custom Mesa build optimized for VirGL on macOS with Apple Silicon.
          
          ## 🚀 Key Features
          - **VirGL Driver**: GPU virtualization support for QEMU
          - **Full OpenGL Support**: Complete OpenGL desktop library
          - **Shared OpenGL API**: Optimized shared API implementation
          - **Metal Translation**: Compatible with Apple's Metal-to-OpenGL translation layer
          - **macOS Optimized**: Built specifically for macOS host systems
          - **Universal Binary**: Supports both ARM64 and x86_64 architectures
          
          ## 📋 Library Comparison
          
          **Linux Original** → **macOS Equivalent**:
          - `libGL.so.1` → `libGL.1.dylib` (OpenGL library)
          - `libglapi.so.0` → `libglapi.0.dylib` (OpenGL API dispatch)
          
          **macOS-Specific Libraries**:
          - VirGL gallium driver modules (full OpenGL configuration)
          
          **Not Included** (not needed for QEMU):
          - OSMesa libraries (off-screen rendering not needed for QEMU)
          - EGL libraries (not supported on macOS Mesa)
          - OpenGL ES libraries (not supported on macOS Mesa)
          
          **Size Differences**: macOS libraries should be comparable to Linux due to:
          - Full OpenGL support enabled for VirGL
          - Shared OpenGL API implementation
          - VirGL driver with complete OpenGL backend
          - Focused on QEMU use case (no unnecessary components)
          - May still be smaller due to macOS-specific optimizations
          - Different linking strategies (.dylib vs .so)
          - Exclusion of X11-specific code paths
          
          ## 📦 What's Included
          - VirGL Gallium driver libraries
          - Mesa core libraries and headers
          - Installation script for easy setup
          - Compatible with QEMU-3dfx for accelerated virtualization
          
          ## 🛠 Installation
          
          **Important Note**: The pkg-config files are initially configured for `/opt/homebrew/`. Methods 2 and 3 automatically fix these paths for custom installations.
          
          ### Method 1: Direct to Homebrew (Recommended)
          Extract directly to `/opt/homebrew/` (integrates with existing Homebrew):
          ```bash
          sudo tar -xzf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz -C / 2>/dev/null
          ```
          
          ### Method 2: Custom Location via Script
          Install to `/opt/mesa-virgl/` using the installation script (automatically fixes pkg-config):
          ```bash
          tar -xzf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
          cd mesa-virgl-macos
          sudo ./install.sh
          ```
          
          ### Method 3: Manual Custom Location
          Extract and manually copy to any location (example: `/usr/local/`):
          ```bash
          tar -xzf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
          cd mesa-virgl-macos
          
          # Copy files to custom location
          sudo cp -r opt/homebrew/* /usr/local/
          
          # Fix pkg-config files for custom installation path
          sudo sed -i.bak 's|prefix=/opt/homebrew|prefix=/usr/local|g' /usr/local/lib/pkgconfig/*.pc
          sudo rm /usr/local/lib/pkgconfig/*.pc.bak 2>/dev/null || true
          ```
          
          ## ✅ Verification
          Verify the download integrity:
          ```bash
          sha256sum -c mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz.sha256
          ```
          
          ## 🔧 Usage with QEMU
          
          ### If installed to `/opt/homebrew/` (Method 1):
          ```bash
          export DYLD_LIBRARY_PATH="/opt/homebrew/lib:$DYLD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH"
          export MESA_LOADER_DRIVER_OVERRIDE=virpipe
          # Your QEMU command with -device virtio-gpu-gl-pci
          ```
          
          ### If installed to `/opt/mesa-virgl/` (Method 2):
          ```bash
          export DYLD_LIBRARY_PATH="/opt/mesa-virgl/lib:$DYLD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="/opt/mesa-virgl/lib/pkgconfig:$PKG_CONFIG_PATH"
          export MESA_LOADER_DRIVER_OVERRIDE=virpipe
          # Your QEMU command with -device virtio-gpu-gl-pci
          ```
          
          ### If installed to `/usr/local/` (Method 3):
          ```bash
          export DYLD_LIBRARY_PATH="/usr/local/lib:$DYLD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
          export MESA_LOADER_DRIVER_OVERRIDE=virpipe
          # Your QEMU command with -device virtio-gpu-gl-pci
          ```
          
          ## 🛠 Building QEMU with Mesa VirGL Libraries
          
          ### Option 1: Use with Existing QEMU (Runtime)
          Simply set environment variables before running QEMU (shown above).
          
          ### Option 2: Compile QEMU with Mesa VirGL Support
          To build QEMU that uses these Mesa libraries directly:
          
          #### Prerequisites:
          ```bash
          # Install QEMU build dependencies
          brew install ninja meson glib pixman
          
          # Ensure Mesa VirGL libraries are installed (any method above)
          # Example: Method 1 (Homebrew integration)
          sudo tar -xzf mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz -C / 2>/dev/null
          ```
          
          #### Configure QEMU Build:
          ```bash
          # Clone QEMU source
          git clone https://github.com/qemu/qemu.git
          cd qemu
          
          # Configure with Mesa VirGL support
          ./configure \\
            --enable-opengl \\
            --enable-virglrenderer \\
            --enable-sdl \\
            --disable-cocoa \\
            --target-list=aarch64-softmmu,x86_64-softmmu,i386-softmmu \\
            --extra-cflags="-I/opt/homebrew/include" \\
            --extra-ldflags="-L/opt/homebrew/lib" \\
            --pkg-config-path="/opt/homebrew/lib/pkgconfig"
          
          # Alternative for custom Mesa installation (/opt/mesa-virgl):
          ./configure \\
            --enable-opengl \\
            --enable-virglrenderer \\
            --enable-sdl \\
            --disable-cocoa \\
            --target-list=aarch64-softmmu,x86_64-softmmu,i386-softmmu \\
            --extra-cflags="-I/opt/mesa-virgl/include" \\
            --extra-ldflags="-L/opt/mesa-virgl/lib" \\
            --pkg-config-path="/opt/mesa-virgl/lib/pkgconfig"
          ```
          
          #### Build QEMU:
          ```bash
          make -j$(sysctl -n hw.ncpu)
          
          # Optional: Install system-wide
          sudo make install
          ```
          
          #### Verify VirGL Integration:
          ```bash
          # Check if QEMU was built with VirGL support
          ./qemu-system-aarch64 --help | grep virgl
          
          # Should show: -device virtio-gpu-gl-pci
          # Should show: -display sdl,gl=on
          ```
          
          ### Option 3: Use with QEMU-3dfx Fork
          If using the QEMU-3dfx fork (recommended for enhanced 3D acceleration):
          
          ```bash
          # Install via Homebrew
          brew tap akihikodaki/qemu
          brew install qemu-3dfx
          
          # Set Mesa VirGL environment before running
          export DYLD_LIBRARY_PATH="/opt/homebrew/lib:$DYLD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH"
          export MESA_LOADER_DRIVER_OVERRIDE=virpipe
          
          # Run QEMU-3dfx with VirGL
          qemu-system-aarch64 \\
            -device virtio-gpu-gl-pci,blob=true \\
            -display sdl,gl=on \\
            [other options...]
          ```
          
          ### Compilation Tips:
          - **For Apple Silicon**: Ensure you're building with ARM64 support
          - **For Intel Macs**: May need `--target-list` adjustments
          - **Dependencies**: VirGL renderer library should be automatically detected
          - **Troubleshooting**: Check `config.log` if configure fails to find Mesa libraries
          
          ## 📊 Build Information
          - **Mesa Version**: 24.3.0-devel
          - **Build Target**: macOS (Darwin)
          - **Gallium Drivers**: VirGL
          - **Build Date**: ${{ github.run_id }}
          - **Git Commit**: ${{ github.sha }}
          
          ## 🐛 Issues & Support
          For issues, questions, or contributions, please visit the [project repository](https://github.com/${{ github.repository }}).
          
          ---
          *Built with GitHub Actions on macOS*
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        asset_name: mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Release Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz.sha256
        asset_name: mesa-virgl-macos-${{ github.event.inputs.release_tag }}.tar.gz.sha256
        asset_content_type: text/plain
